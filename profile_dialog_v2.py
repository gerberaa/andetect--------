#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–†–æ–∑—à–∏—Ä–µ–Ω–∏–π –¥—ñ–∞–ª–æ–≥ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è/—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∑ –º—ñ—Ç–∫–∞–º–∏ —Ç–∞ —ñ–∫–æ–Ω–∫–∞–º–∏
"""

from PyQt5.QtWidgets import (QDialog, QVBoxLayout, QHBoxLayout, QFormLayout,
                            QLineEdit, QSpinBox, QComboBox, QCheckBox, 
                            QPushButton, QDialogButtonBox, QTabWidget,
                            QWidget, QLabel, QTextEdit, QGroupBox,
                            QScrollArea, QGridLayout, QFrame, QSlider,
                            QColorDialog, QListWidget, QListWidgetItem,
                            QToolButton, QButtonGroup, QRadioButton)
from PyQt5.QtCore import Qt, pyqtSignal
from PyQt5.QtGui import QIcon, QPixmap, QFont, QPalette, QColor

from profile_icons import (ProfileIcon, PROFILE_ICONS, COUNTRY_FLAGS, 
                          LABEL_COLORS, get_country_by_timezone)


class ColorButton(QPushButton):
    """–ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–∏–±–æ—Ä—É –∫–æ–ª—å–æ—Ä—É"""
    
    colorChanged = pyqtSignal(str)
    
    def __init__(self, color_name="blue", parent=None):
        super().__init__(parent)
        self.color_name = color_name
        self.setFixedSize(40, 30)
        self.clicked.connect(self.choose_color)
        self.update_color()
        
    def update_color(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–ª—å–æ—Ä—É –∫–Ω–æ–ø–∫–∏"""
        color = LABEL_COLORS.get(self.color_name, '#4488FF')
        self.setStyleSheet(f"""
            QPushButton {{
                background-color: {color};
                border: 2px solid #333;
                border-radius: 5px;
            }}
            QPushButton:hover {{
                border: 2px solid #000;
            }}
            QPushButton:pressed {{
                border: 3px solid #000;
            }}
        """)
        
    def choose_color(self):
        """–í—ñ–¥–∫—Ä–∏—Ç—Ç—è –¥—ñ–∞–ª–æ–≥—É –≤–∏–±–æ—Ä—É –∫–æ–ª—å–æ—Ä—É"""
        current_color = QColor(LABEL_COLORS.get(self.color_name, '#4488FF'))
        color = QColorDialog.getColor(current_color, self, "–í–∏–±–µ—Ä—ñ—Ç—å –∫–æ–ª—ñ—Ä –º—ñ—Ç–∫–∏")
        
        if color.isValid():
            self.color_name = color.name()
            self.update_color()
            self.colorChanged.emit(self.color_name)


class IconButton(QToolButton):
    """–ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–∏–±–æ—Ä—É —ñ–∫–æ–Ω–∫–∏"""
    
    iconChanged = pyqtSignal(str)
    
    def __init__(self, icon_type="default", parent=None):
        super().__init__(parent)
        self.icon_type = icon_type
        self.setFixedSize(50, 50)
        self.clicked.connect(self.choose_icon)
        self.update_icon()
        
    def update_icon(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–∫–æ–Ω–∫–∏ –∫–Ω–æ–ø–∫–∏"""
        icon = ProfileIcon.create_profile_icon(self.icon_type, size=32)
        self.setIcon(icon)
        self.setIconSize(icon.availableSizes()[0] if icon.availableSizes() else (32, 32))
        self.setToolTip(f"–¢–∏–ø: {self.icon_type}")
        
    def choose_icon(self):
        """–í—ñ–¥–∫—Ä–∏—Ç—Ç—è –¥—ñ–∞–ª–æ–≥—É –≤–∏–±–æ—Ä—É —ñ–∫–æ–Ω–∫–∏"""
        dialog = IconPickerDialog(self.icon_type, self)
        if dialog.exec_() == QDialog.Accepted:
            self.icon_type = dialog.selected_icon
            self.update_icon()
            self.iconChanged.emit(self.icon_type)


class IconPickerDialog(QDialog):
    """–î—ñ–∞–ª–æ–≥ –≤–∏–±–æ—Ä—É —ñ–∫–æ–Ω–∫–∏"""
    
    def __init__(self, current_icon="default", parent=None):
        super().__init__(parent)
        self.selected_icon = current_icon
        self.setWindowTitle("–í–∏–±–µ—Ä—ñ—Ç—å —ñ–∫–æ–Ω–∫—É –ø—Ä–æ—Ñ—ñ–ª—é")
        self.setMinimumSize(400, 300)
        self.init_ui()
        
    def init_ui(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
        layout = QVBoxLayout(self)
        
        # –û–±–ª–∞—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        scroll = QScrollArea()
        scroll_widget = QWidget()
        grid_layout = QGridLayout(scroll_widget)
        
        # –ì—Ä—É–ø–∏ —ñ–∫–æ–Ω–æ–∫
        self.button_group = QButtonGroup()
        
        row, col = 0, 0
        for icon_type, emoji in PROFILE_ICONS.items():
            btn = QRadioButton()
            btn.setFixedSize(60, 60)
            btn.setStyleSheet(f"""
                QRadioButton {{
                    border: 2px solid #ccc;
                    border-radius: 5px;
                    background: white;
                    font-size: 24px;
                }}
                QRadioButton:checked {{
                    border: 3px solid #007acc;
                    background: #e6f3ff;
                }}
                QRadioButton:hover {{
                    border: 2px solid #007acc;
                }}
                QRadioButton::indicator {{
                    width: 0px;
                    height: 0px;
                }}
            """)
            
            btn.setText(emoji)
            btn.setToolTip(f"{icon_type.replace('_', ' ').title()}")
            btn.toggled.connect(lambda checked, it=icon_type: self.icon_selected(it) if checked else None)
            
            if icon_type == self.selected_icon:
                btn.setChecked(True)
                
            self.button_group.addButton(btn)
            grid_layout.addWidget(btn, row, col)
            
            col += 1
            if col >= 6:  # 6 —ñ–∫–æ–Ω–æ–∫ –≤ —Ä—è–¥–∫—É
                col = 0
                row += 1
        
        scroll.setWidget(scroll_widget)
        layout.addWidget(scroll)
        
        # –ö–Ω–æ–ø–∫–∏
        buttons = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        buttons.accepted.connect(self.accept)
        buttons.rejected.connect(self.reject)
        layout.addWidget(buttons)
        
    def icon_selected(self, icon_type):
        """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —ñ–∫–æ–Ω–∫–∏"""
        self.selected_icon = icon_type


class ProfileDialogV2(QDialog):
    """–†–æ–∑—à–∏—Ä–µ–Ω–∏–π –¥—ñ–∞–ª–æ–≥ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è/—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é"""
    
    def __init__(self, parent=None, profile=None):
        super().__init__(parent)
        self.profile = profile
        self.setWindowTitle('–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å' if not profile else '–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å')
        self.setMinimumSize(700, 800)
        self.init_ui()
        
        if profile:
            self.load_profile_data()
        else:
            self.set_defaults()
            
    def init_ui(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
        layout = QVBoxLayout(self)
        
        # –í–∫–ª–∞–¥–∫–∏
        tab_widget = QTabWidget()
        layout.addWidget(tab_widget)
        
        # –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
        self.create_general_tab(tab_widget)
        
        # –ó–æ–≤–Ω—ñ—à–Ω—ñ—Å—Ç—å —Ç–∞ –º—ñ—Ç–∫–∏
        self.create_appearance_tab(tab_widget)
        
        # Browser fingerprinting
        self.create_fingerprint_tab(tab_widget)
        
        # –ü—Ä–æ–∫—Å—ñ
        self.create_proxy_tab(tab_widget)
        
        # –î–æ–∑–≤–æ–ª–∏
        self.create_permissions_tab(tab_widget)
        
        # –î–æ–¥–∞—Ç–∫–æ–≤–µ
        self.create_advanced_tab(tab_widget)
        
        # –ö–Ω–æ–ø–∫–∏
        buttons_layout = QHBoxLayout()
        
        generate_btn = QPushButton("üé≤ –ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤—ñ –¥–∞–Ω—ñ")
        generate_btn.clicked.connect(self.generate_random_data)
        buttons_layout.addWidget(generate_btn)
        
        test_btn = QPushButton("üß™ –¢–µ—Å—Ç –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó")
        test_btn.clicked.connect(self.test_configuration)
        buttons_layout.addWidget(test_btn)
        
        buttons_layout.addStretch()
        
        buttons = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        buttons.accepted.connect(self.accept)
        buttons.rejected.connect(self.reject)
        buttons_layout.addWidget(buttons)
        
        layout.addLayout(buttons_layout)
        
    def create_general_tab(self, tab_widget):
        """–í–∫–ª–∞–¥–∫–∞ –∑–∞–≥–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
        main_group = QGroupBox("–û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è")
        main_layout = QFormLayout(main_group)
        
        self.name_edit = QLineEdit()
        self.name_edit.setPlaceholderText("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø—Ä–æ—Ñ—ñ–ª—é")
        main_layout.addRow("–ù–∞–∑–≤–∞ –ø—Ä–æ—Ñ—ñ–ª—é:", self.name_edit)
        
        self.description_edit = QTextEdit()
        self.description_edit.setMaximumHeight(60)
        self.description_edit.setPlaceholderText("–û–ø–∏—Å –ø—Ä–æ—Ñ—ñ–ª—é...")
        main_layout.addRow("–û–ø–∏—Å:", self.description_edit)
        
        self.tags_edit = QLineEdit()
        self.tags_edit.setPlaceholderText("—Ä–æ–±–æ—Ç–∞, —Å–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ä–µ–∂—ñ, –ø–æ–∫—É–ø–∫–∏")
        main_layout.addRow("–¢–µ–≥–∏ (—á–µ—Ä–µ–∑ –∫–æ–º—É):", self.tags_edit)
        
        layout.addWidget(main_group)
        
        # –°—Ç–∞—Ç—É—Å
        status_group = QGroupBox("–°—Ç–∞—Ç—É—Å —Ç–∞ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç")
        status_layout = QFormLayout(status_group)
        
        self.status_combo = QComboBox()
        self.status_combo.addItems(['active', 'inactive', 'blocked'])
        status_layout.addRow("–°—Ç–∞—Ç—É—Å:", self.status_combo)
        
        self.favorite_check = QCheckBox("‚≠ê –£–ª—é–±–ª–µ–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å")
        status_layout.addRow(self.favorite_check)
        
        layout.addWidget(status_group)
        
        # –ù–æ—Ç–∞—Ç–∫–∏
        notes_group = QGroupBox("–ù–æ—Ç–∞—Ç–∫–∏")
        notes_layout = QVBoxLayout(notes_group)
        
        self.notes_edit = QTextEdit()
        self.notes_edit.setMaximumHeight(80)
        self.notes_edit.setPlaceholderText("–í–∞—à—ñ –Ω–æ—Ç–∞—Ç–∫–∏ –ø—Ä–æ —Ü–µ–π –ø—Ä–æ—Ñ—ñ–ª—å...")
        notes_layout.addWidget(self.notes_edit)
        
        layout.addWidget(notes_group)
        layout.addStretch()
        
        tab_widget.addTab(widget, "üìã –ó–∞–≥–∞–ª—å–Ω—ñ")
        
    def create_appearance_tab(self, tab_widget):
        """–í–∫–ª–∞–¥–∫–∞ –∑–æ–≤–Ω—ñ—à–Ω–æ—Å—Ç—ñ —Ç–∞ –º—ñ—Ç–æ–∫"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # –Ü–∫–æ–Ω–∫–∞ –ø—Ä–æ—Ñ—ñ–ª—é
        icon_group = QGroupBox("–Ü–∫–æ–Ω–∫–∞ –ø—Ä–æ—Ñ—ñ–ª—é")
        icon_layout = QHBoxLayout(icon_group)
        
        icon_layout.addWidget(QLabel("–¢–∏–ø —ñ–∫–æ–Ω–∫–∏:"))
        self.icon_button = IconButton()
        self.icon_button.iconChanged.connect(self.on_icon_changed)
        icon_layout.addWidget(self.icon_button)
        icon_layout.addStretch()
        
        layout.addWidget(icon_group)
        
        # –ü—Ä–∞–ø–æ—Ä–µ—Ü—å –∫—Ä–∞—ó–Ω–∏
        country_group = QGroupBox("–ü—Ä–∞–ø–æ—Ä–µ—Ü—å –∫—Ä–∞—ó–Ω–∏")
        country_layout = QFormLayout(country_group)
        
        self.country_combo = QComboBox()
        countries = list(COUNTRY_FLAGS.keys())
        countries.sort()
        for country in countries:
            flag = COUNTRY_FLAGS[country]
            self.country_combo.addItem(f"{flag} {country}", country)
        country_layout.addRow("–ö—Ä–∞—ó–Ω–∞:", self.country_combo)
        
        layout.addWidget(country_group)
        
        # –ö–æ–ª—ñ—Ä –º—ñ—Ç–∫–∏
        color_group = QGroupBox("–ö–æ–ª—ñ—Ä –º—ñ—Ç–∫–∏")
        color_layout = QHBoxLayout(color_group)
        
        color_layout.addWidget(QLabel("–ö–æ–ª—ñ—Ä:"))
        self.color_button = ColorButton()
        self.color_button.colorChanged.connect(self.on_color_changed)
        color_layout.addWidget(self.color_button)
        
        # –®–≤–∏–¥–∫—ñ –∫–æ–ª—å–æ—Ä–∏
        quick_colors = ['red', 'orange', 'yellow', 'green', 'blue', 'purple', 'pink', 'gray']
        for color_name in quick_colors:
            btn = QPushButton()
            btn.setFixedSize(25, 25)
            btn.setStyleSheet(f"""
                QPushButton {{
                    background-color: {LABEL_COLORS[color_name]};
                    border: 1px solid #333;
                    border-radius: 3px;
                }}
                QPushButton:hover {{
                    border: 2px solid #000;
                }}
            """)
            btn.clicked.connect(lambda checked, c=color_name: self.set_quick_color(c))
            color_layout.addWidget(btn)
            
        color_layout.addStretch()
        layout.addWidget(color_group)
        
        # –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥
        preview_group = QGroupBox("–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥")
        preview_layout = QHBoxLayout(preview_group)
        
        self.preview_label = QLabel("üåê –ü—Ä–æ—Ñ—ñ–ª—å")
        self.preview_label.setStyleSheet("""
            QLabel {
                padding: 10px;
                border: 2px solid #ccc;
                border-radius: 5px;
                background: white;
                font-size: 14px;
            }
        """)
        preview_layout.addWidget(self.preview_label)
        preview_layout.addStretch()
        
        layout.addWidget(preview_group)
        layout.addStretch()
        
        tab_widget.addTab(widget, "üé® –ó–æ–≤–Ω—ñ—à–Ω—ñ—Å—Ç—å")
        
    def create_fingerprint_tab(self, tab_widget):
        """–í–∫–ª–∞–¥–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å fingerprinting"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # User-Agent
        ua_group = QGroupBox("User-Agent")
        ua_layout = QVBoxLayout(ua_group)
        
        self.user_agent_edit = QTextEdit()
        self.user_agent_edit.setMaximumHeight(80)
        self.user_agent_edit.setPlaceholderText("User-Agent –±—Ä–∞—É–∑–µ—Ä–∞")
        ua_layout.addWidget(self.user_agent_edit)
        
        ua_buttons = QHBoxLayout()
        chrome_btn = QPushButton("Chrome")
        firefox_btn = QPushButton("Firefox")
        safari_btn = QPushButton("Safari")
        edge_btn = QPushButton("Edge")
        
        chrome_btn.clicked.connect(lambda: self.set_browser_ua('chrome'))
        firefox_btn.clicked.connect(lambda: self.set_browser_ua('firefox'))
        safari_btn.clicked.connect(lambda: self.set_browser_ua('safari'))
        edge_btn.clicked.connect(lambda: self.set_browser_ua('edge'))
        
        ua_buttons.addWidget(chrome_btn)
        ua_buttons.addWidget(firefox_btn)
        ua_buttons.addWidget(safari_btn)
        ua_buttons.addWidget(edge_btn)
        ua_buttons.addStretch()
        
        ua_layout.addLayout(ua_buttons)
        layout.addWidget(ua_group)
        
        # –†–æ–∑–º—ñ—Ä –µ–∫—Ä–∞–Ω—É
        screen_group = QGroupBox("–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –µ–∫—Ä–∞–Ω—É")
        screen_layout = QFormLayout(screen_group)
        
        screen_size_layout = QHBoxLayout()
        self.screen_width_spin = QSpinBox()
        self.screen_width_spin.setRange(800, 4096)
        self.screen_width_spin.setValue(1920)
        screen_size_layout.addWidget(self.screen_width_spin)
        
        screen_size_layout.addWidget(QLabel("√ó"))
        
        self.screen_height_spin = QSpinBox()
        self.screen_height_spin.setRange(600, 2160)
        self.screen_height_spin.setValue(1080)
        screen_size_layout.addWidget(self.screen_height_spin)
        
        # –®–≤–∏–¥–∫—ñ —Ä–æ–∑–º—ñ—Ä–∏
        sizes_layout = QHBoxLayout()
        common_sizes = [
            (1920, 1080, "FHD"), (1366, 768, "HD"), (1440, 900, "HD+"),
            (2560, 1440, "QHD"), (1280, 1024, "SXGA")
        ]
        
        for width, height, name in common_sizes:
            btn = QPushButton(name)
            btn.clicked.connect(lambda checked, w=width, h=height: self.set_screen_size(w, h))
            sizes_layout.addWidget(btn)
        sizes_layout.addStretch()
        
        screen_layout.addRow("–†–æ–∑–º—ñ—Ä:", screen_size_layout)
        screen_layout.addRow("–®–≤–∏–¥–∫–∏–π –≤–∏–±—ñ—Ä:", sizes_layout)
        
        layout.addWidget(screen_group)
        
        # –õ–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—è
        locale_group = QGroupBox("–õ–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—è")
        locale_layout = QFormLayout(locale_group)
        
        self.timezone_combo = QComboBox()
        timezones = [
            'Europe/Kiev', 'Europe/London', 'Europe/Berlin', 'Europe/Paris',
            'America/New_York', 'America/Los_Angeles', 'America/Chicago',
            'Asia/Tokyo', 'Asia/Shanghai', 'Australia/Sydney'
        ]
        self.timezone_combo.addItems(timezones)
        self.timezone_combo.currentTextChanged.connect(self.on_timezone_changed)
        locale_layout.addRow("–ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å:", self.timezone_combo)
        
        self.language_combo = QComboBox()
        languages = ['uk-UA', 'en-US', 'en-GB', 'de-DE', 'fr-FR', 'es-ES', 'ja-JP', 'zh-CN']
        self.language_combo.addItems(languages)
        locale_layout.addRow("–ú–æ–≤–∞:", self.language_combo)
        
        layout.addWidget(locale_group)
        layout.addStretch()
        
        tab_widget.addTab(widget, "üîç Fingerprinting")
        
    def create_proxy_tab(self, tab_widget):
        """–í–∫–ª–∞–¥–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –ø—Ä–æ–∫—Å—ñ"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # –®–≤–∏–¥–∫–∏–π –≤–≤—ñ–¥
        quick_group = QGroupBox("–®–≤–∏–¥–∫–∏–π –≤–≤—ñ–¥ –ø—Ä–æ–∫—Å—ñ")
        quick_layout = QFormLayout(quick_group)
        
        self.proxy_string_edit = QLineEdit()
        self.proxy_string_edit.setPlaceholderText("45.158.61.63:46130:RQQ6C0VF:MZH4VXZU")
        self.proxy_string_edit.textChanged.connect(self.parse_proxy_string)
        quick_layout.addRow("IP:PORT:USER:PASS:", self.proxy_string_edit)
        
        layout.addWidget(quick_group)
        
        # –î–µ—Ç–∞–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        proxy_group = QGroupBox("–î–µ—Ç–∞–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–∫—Å—ñ")
        proxy_layout = QFormLayout(proxy_group)
        
        self.proxy_type_combo = QComboBox()
        self.proxy_type_combo.addItems(['HTTP', 'SOCKS5'])
        proxy_layout.addRow("–¢–∏–ø:", self.proxy_type_combo)
        
        self.proxy_host_edit = QLineEdit()
        self.proxy_host_edit.setPlaceholderText("IP –∞–¥—Ä–µ—Å–∞")
        proxy_layout.addRow("–•–æ—Å—Ç:", self.proxy_host_edit)
        
        self.proxy_port_spin = QSpinBox()
        self.proxy_port_spin.setRange(1, 65535)
        self.proxy_port_spin.setValue(8080)
        proxy_layout.addRow("–ü–æ—Ä—Ç:", self.proxy_port_spin)
        
        self.proxy_username_edit = QLineEdit()
        self.proxy_username_edit.setPlaceholderText("–õ–æ–≥—ñ–Ω")
        proxy_layout.addRow("–õ–æ–≥—ñ–Ω:", self.proxy_username_edit)
        
        self.proxy_password_edit = QLineEdit()
        self.proxy_password_edit.setEchoMode(QLineEdit.Password)
        self.proxy_password_edit.setPlaceholderText("–ü–∞—Ä–æ–ª—å")
        proxy_layout.addRow("–ü–∞—Ä–æ–ª—å:", self.proxy_password_edit)
        
        layout.addWidget(proxy_group)
        
        # –¢–µ—Å—Ç –ø—Ä–æ–∫—Å—ñ
        test_layout = QHBoxLayout()
        test_proxy_btn = QPushButton("üß™ –¢–µ—Å—Ç—É–≤–∞—Ç–∏ –ø—Ä–æ–∫—Å—ñ")
        test_proxy_btn.clicked.connect(self.test_proxy)
        test_layout.addWidget(test_proxy_btn)
        test_layout.addStretch()
        
        layout.addLayout(test_layout)
        layout.addStretch()
        
        tab_widget.addTab(widget, "üåê –ü—Ä–æ–∫—Å—ñ")
        
    def create_permissions_tab(self, tab_widget):
        """–í–∫–ª–∞–¥–∫–∞ –¥–æ–∑–≤–æ–ª—ñ–≤ –±—Ä–∞—É–∑–µ—Ä–∞"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # –û—Å–Ω–æ–≤–Ω—ñ –¥–æ–∑–≤–æ–ª–∏
        main_permissions = QGroupBox("–û—Å–Ω–æ–≤–Ω—ñ –¥–æ–∑–≤–æ–ª–∏")
        main_layout = QVBoxLayout(main_permissions)
        
        self.javascript_check = QCheckBox("üü® –î–æ–∑–≤–æ–ª–∏—Ç–∏ JavaScript")
        self.javascript_check.setChecked(True)
        main_layout.addWidget(self.javascript_check)
        
        self.images_check = QCheckBox("üñºÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
        self.images_check.setChecked(True)
        main_layout.addWidget(self.images_check)
        
        self.plugins_check = QCheckBox("üîå –î–æ–∑–≤–æ–ª–∏—Ç–∏ –ø–ª–∞–≥—ñ–Ω–∏")
        self.plugins_check.setChecked(True)
        main_layout.addWidget(self.plugins_check)
        
        self.cookies_check = QCheckBox("üç™ –ó–±–µ—Ä—ñ–≥–∞—Ç–∏ cookies")
        self.cookies_check.setChecked(True)
        main_layout.addWidget(self.cookies_check)
        
        layout.addWidget(main_permissions)
        
        # –ü—Ä–∏–≤–∞—Ç–Ω—ñ—Å—Ç—å
        privacy_permissions = QGroupBox("–ü—Ä–∏–≤–∞—Ç–Ω—ñ—Å—Ç—å")
        privacy_layout = QVBoxLayout(privacy_permissions)
        
        self.geolocation_check = QCheckBox("üåç –î–æ–∑–≤–æ–ª–∏—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é")
        self.geolocation_check.setChecked(False)
        privacy_layout.addWidget(self.geolocation_check)
        
        self.notifications_check = QCheckBox("üîî –î–æ–∑–≤–æ–ª–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è")
        self.notifications_check.setChecked(False)
        privacy_layout.addWidget(self.notifications_check)
        
        self.webrtc_check = QCheckBox("üìπ –î–æ–∑–≤–æ–ª–∏—Ç–∏ WebRTC")
        self.webrtc_check.setChecked(False)
        privacy_layout.addWidget(self.webrtc_check)
        
        layout.addWidget(privacy_permissions)
        layout.addStretch()
        
        tab_widget.addTab(widget, "üîí –î–æ–∑–≤–æ–ª–∏")
        
    def create_advanced_tab(self, tab_widget):
        """–í–∫–ª–∞–¥–∫–∞ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_group = QGroupBox("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è")
        stats_layout = QFormLayout(stats_group)
        
        self.usage_count_label = QLabel("0")
        stats_layout.addRow("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø—É—Å–∫—ñ–≤:", self.usage_count_label)
        
        self.total_time_label = QLabel("0 —Ö–≤")
        stats_layout.addRow("–ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å:", self.total_time_label)
        
        self.last_ip_label = QLabel("–ù–µ–≤—ñ–¥–æ–º–æ")
        stats_layout.addRow("–û—Å—Ç–∞–Ω–Ω—ñ–π IP:", self.last_ip_label)
        
        layout.addWidget(stats_group)
        
        # Fingerprints
        fingerprints_group = QGroupBox("–£–Ω—ñ–∫–∞–ª—å–Ω—ñ –≤—ñ–¥–±–∏—Ç–∫–∏")
        fingerprints_layout = QFormLayout(fingerprints_group)
        
        self.canvas_edit = QLineEdit()
        self.canvas_edit.setPlaceholderText("–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≥–µ–Ω–µ—Ä—É—î—Ç—å—Å—è")
        fingerprints_layout.addRow("Canvas:", self.canvas_edit)
        
        self.webgl_edit = QLineEdit()
        self.webgl_edit.setPlaceholderText("–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≥–µ–Ω–µ—Ä—É—î—Ç—å—Å—è")
        fingerprints_layout.addRow("WebGL:", self.webgl_edit)
        
        regen_fingerprints_btn = QPushButton("üîÑ –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –Ω–æ–≤—ñ")
        regen_fingerprints_btn.clicked.connect(self.regenerate_fingerprints)
        fingerprints_layout.addRow(regen_fingerprints_btn)
        
        layout.addWidget(fingerprints_group)
        layout.addStretch()
        
        tab_widget.addTab(widget, "‚öôÔ∏è –î–æ–¥–∞—Ç–∫–æ–≤–µ")
    
    def set_defaults(self):
        """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º"""
        self.name_edit.setText("–ù–æ–≤–∏–π –ø—Ä–æ—Ñ—ñ–ª—å")
        self.status_combo.setCurrentText("active")
        self.country_combo.setCurrentText("UA")
        self.generate_random_data()
        
    def generate_random_data(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö"""
        import random
        from user_agents import get_random_user_agent
        
        # User-Agent
        try:
            self.user_agent_edit.setPlainText(get_random_user_agent())
        except:
            pass
            
        # –†–æ–∑–º—ñ—Ä –µ–∫—Ä–∞–Ω—É
        sizes = [(1920, 1080), (1366, 768), (1440, 900), (2560, 1440)]
        width, height = random.choice(sizes)
        self.screen_width_spin.setValue(width)
        self.screen_height_spin.setValue(height)
        
        # Fingerprints
        import uuid
        self.canvas_edit.setText(str(uuid.uuid4())[:16])
        self.webgl_edit.setText(str(uuid.uuid4())[:16])
        
        # –í–∏–ø–∞–¥–∫–æ–≤–∞ —ñ–∫–æ–Ω–∫–∞
        icon_types = list(PROFILE_ICONS.keys())
        random_icon = random.choice(icon_types)
        self.icon_button.icon_type = random_icon
        self.icon_button.update_icon()
        
        # –í–∏–ø–∞–¥–∫–æ–≤–∏–π –∫–æ–ª—ñ—Ä
        colors = list(LABEL_COLORS.keys())
        random_color = random.choice(colors)
        self.color_button.color_name = random_color
        self.color_button.update_color()
        
        self.update_preview()
        
    def parse_proxy_string(self):
        """–ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–∫—Å—ñ —Ä—è–¥–∫–∞"""
        proxy_string = self.proxy_string_edit.text().strip()
        
        if ':' in proxy_string:
            parts = proxy_string.split(':')
            if len(parts) >= 2:
                self.proxy_host_edit.setText(parts[0])
                try:
                    self.proxy_port_spin.setValue(int(parts[1]))
                except ValueError:
                    pass
                    
                if len(parts) >= 4:
                    self.proxy_username_edit.setText(parts[2])
                    self.proxy_password_edit.setText(parts[3])
                    
    def on_icon_changed(self, icon_type):
        """–û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ —ñ–∫–æ–Ω–∫–∏"""
        self.update_preview()
        
    def on_color_changed(self, color):
        """–û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ –∫–æ–ª—å–æ—Ä—É"""
        self.update_preview()
        
    def on_timezone_changed(self, timezone):
        """–û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å—É"""
        country = get_country_by_timezone(timezone)
        index = self.country_combo.findData(country)
        if index >= 0:
            self.country_combo.setCurrentIndex(index)
        self.update_preview()
        
    def set_quick_color(self, color_name):
        """–®–≤–∏–¥–∫–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–ª—å–æ—Ä—É"""
        self.color_button.color_name = color_name
        self.color_button.update_color()
        self.update_preview()
        
    def set_screen_size(self, width, height):
        """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É –µ–∫—Ä–∞–Ω—É"""
        self.screen_width_spin.setValue(width)
        self.screen_height_spin.setValue(height)
        
    def set_browser_ua(self, browser):
        """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è User-Agent –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞"""
        from user_agents import get_user_agents_by_browser
        
        try:
            import random
            user_agents = get_user_agents_by_browser(browser)
            if user_agents:
                ua = random.choice(user_agents)
                self.user_agent_edit.setPlainText(ua)
        except:
            pass
            
    def regenerate_fingerprints(self):
        """–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—è fingerprints"""
        import uuid
        self.canvas_edit.setText(str(uuid.uuid4())[:16])
        self.webgl_edit.setText(str(uuid.uuid4())[:16])
        
    def update_preview(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É"""
        icon_emoji = PROFILE_ICONS.get(self.icon_button.icon_type, 'üåê')
        country_emoji = COUNTRY_FLAGS.get(self.country_combo.currentData(), 'üá∫üá¶')
        color = LABEL_COLORS.get(self.color_button.color_name, '#4488FF')
        
        name = self.name_edit.text() or "–ü—Ä–æ—Ñ—ñ–ª—å"
        
        self.preview_label.setText(f"{icon_emoji} {country_emoji} {name}")
        self.preview_label.setStyleSheet(f"""
            QLabel {{
                padding: 10px;
                border: 3px solid {color};
                border-radius: 8px;
                background: white;
                font-size: 14px;
                font-weight: bold;
            }}
        """)
        
    def test_proxy(self):
        """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–∫—Å—ñ"""
        from PyQt5.QtWidgets import QMessageBox
        QMessageBox.information(self, "–¢–µ—Å—Ç –ø—Ä–æ–∫—Å—ñ", "–§—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–∫—Å—ñ –±—É–¥–µ –¥–æ–¥–∞–Ω–∞")
        
    def test_configuration(self):
        """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"""
        from PyQt5.QtWidgets import QMessageBox
        
        errors = []
        warnings = []
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏
        if not self.name_edit.text().strip():
            errors.append("–ù–∞–∑–≤–∞ –ø—Ä–æ—Ñ—ñ–ª—é –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø—É—Å—Ç–æ—é")
            
        if not self.user_agent_edit.toPlainText().strip():
            errors.append("User-Agent –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø—É—Å—Ç–∏–º")
            
        if self.proxy_host_edit.text() and not self.proxy_port_spin.value():
            warnings.append("–í–∫–∞–∑–∞–Ω–æ —Ö–æ—Å—Ç –ø—Ä–æ–∫—Å—ñ –∞–ª–µ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ –ø–æ—Ä—Ç")
            
        # –†–µ–∑—É–ª—å—Ç–∞—Ç
        if errors:
            QMessageBox.critical(self, "–ü–æ–º–∏–ª–∫–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó", "\n".join(errors))
        elif warnings:
            QMessageBox.warning(self, "–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "\n".join(warnings))
        else:
            QMessageBox.information(self, "–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω–æ", "‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ø—Ä–æ—Ñ—ñ–ª—é –≤–∞–ª—ñ–¥–Ω–∞!")
            
    def load_profile_data(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ—Ñ—ñ–ª—é"""
        if not self.profile:
            return
            
        # –û—Å–Ω–æ–≤–Ω—ñ –¥–∞–Ω—ñ
        self.name_edit.setText(self.profile.name)
        self.description_edit.setPlainText(getattr(self.profile, 'description', ''))
        self.tags_edit.setText(getattr(self.profile, 'tags', ''))
        self.notes_edit.setPlainText(getattr(self.profile, 'notes', ''))
        
        # –°—Ç–∞—Ç—É—Å
        status = getattr(self.profile, 'status', 'active')
        self.status_combo.setCurrentText(status)
        self.favorite_check.setChecked(getattr(self.profile, 'favorite', False))
        
        # –ó–æ–≤–Ω—ñ—à–Ω—ñ—Å—Ç—å
        icon_type = getattr(self.profile, 'icon_type', 'default')
        self.icon_button.icon_type = icon_type
        self.icon_button.update_icon()
        
        country_code = getattr(self.profile, 'country_code', 'UA')
        index = self.country_combo.findData(country_code)
        if index >= 0:
            self.country_combo.setCurrentIndex(index)
            
        color = getattr(self.profile, 'label_color', 'blue')
        self.color_button.color_name = color
        self.color_button.update_color()
        
        # Fingerprinting
        self.user_agent_edit.setPlainText(self.profile.user_agent)
        self.screen_width_spin.setValue(self.profile.screen_width)
        self.screen_height_spin.setValue(self.profile.screen_height)
        
        tz_index = self.timezone_combo.findText(self.profile.timezone)
        if tz_index >= 0:
            self.timezone_combo.setCurrentIndex(tz_index)
            
        lang_index = self.language_combo.findText(self.profile.language)
        if lang_index >= 0:
            self.language_combo.setCurrentIndex(lang_index)
            
        # –ü—Ä–æ–∫—Å—ñ
        if self.profile.proxy_host:
            self.proxy_host_edit.setText(self.profile.proxy_host)
            self.proxy_port_spin.setValue(self.profile.proxy_port)
            self.proxy_username_edit.setText(self.profile.proxy_username)
            self.proxy_password_edit.setText(self.profile.proxy_password)
            
            if self.profile.proxy_username and self.profile.proxy_password:
                proxy_full = f"{self.profile.proxy_host}:{self.profile.proxy_port}:{self.profile.proxy_username}:{self.profile.proxy_password}"
            else:
                proxy_full = f"{self.profile.proxy_host}:{self.profile.proxy_port}"
            self.proxy_string_edit.setText(proxy_full)
            
            proxy_type_index = self.proxy_type_combo.findText(self.profile.proxy_type)
            if proxy_type_index >= 0:
                self.proxy_type_combo.setCurrentIndex(proxy_type_index)
                
        # –î–æ–∑–≤–æ–ª–∏
        self.javascript_check.setChecked(self.profile.javascript_enabled)
        self.images_check.setChecked(self.profile.images_enabled)
        self.plugins_check.setChecked(self.profile.plugins_enabled)
        self.cookies_check.setChecked(self.profile.cookies_enabled)
        self.geolocation_check.setChecked(self.profile.geolocation_enabled)
        self.notifications_check.setChecked(self.profile.notifications_enabled)
        self.webrtc_check.setChecked(self.profile.webrtc_enabled)
        
        # –î–æ–¥–∞—Ç–∫–æ–≤–µ
        self.canvas_edit.setText(self.profile.canvas_fingerprint)
        self.webgl_edit.setText(self.profile.webgl_fingerprint)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        usage_count = getattr(self.profile, 'usage_count', 0)
        self.usage_count_label.setText(str(usage_count))
        
        total_time = getattr(self.profile, 'total_time', 0)
        hours = total_time // 3600
        minutes = (total_time % 3600) // 60
        if hours > 0:
            self.total_time_label.setText(f"{hours}–≥ {minutes}—Ö–≤")
        else:
            self.total_time_label.setText(f"{minutes}—Ö–≤")
            
        last_ip = getattr(self.profile, 'last_ip', '')
        self.last_ip_label.setText(last_ip or "–ù–µ–≤—ñ–¥–æ–º–æ")
        
        self.update_preview()
        
    def get_profile_data(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ —Ñ–æ—Ä–º–∏"""
        return {
            'name': self.name_edit.text().strip(),
            'description': self.description_edit.toPlainText().strip(),
            'tags': self.tags_edit.text().strip(),
            'notes': self.notes_edit.toPlainText().strip(),
            'status': self.status_combo.currentText(),
            'favorite': self.favorite_check.isChecked(),
            'icon_type': self.icon_button.icon_type,
            'country_code': self.country_combo.currentData(),
            'label_color': self.color_button.color_name,
            'user_agent': self.user_agent_edit.toPlainText().strip(),
            'screen_width': self.screen_width_spin.value(),
            'screen_height': self.screen_height_spin.value(),
            'timezone': self.timezone_combo.currentText(),
            'language': self.language_combo.currentText(),
            'proxy_host': self.proxy_host_edit.text().strip(),
            'proxy_port': self.proxy_port_spin.value(),
            'proxy_username': self.proxy_username_edit.text().strip(),
            'proxy_password': self.proxy_password_edit.text().strip(),
            'proxy_type': self.proxy_type_combo.currentText(),
            'javascript_enabled': self.javascript_check.isChecked(),
            'images_enabled': self.images_check.isChecked(),
            'plugins_enabled': self.plugins_check.isChecked(),
            'cookies_enabled': self.cookies_check.isChecked(),
            'geolocation_enabled': self.geolocation_check.isChecked(),
            'notifications_enabled': self.notifications_check.isChecked(),
            'webrtc_enabled': self.webrtc_check.isChecked(),
            'canvas_fingerprint': self.canvas_edit.text().strip(),
            'webgl_fingerprint': self.webgl_edit.text().strip(),
        }
        
    def accept(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è"""
        data = self.get_profile_data()
        
        if not data['name']:
            from PyQt5.QtWidgets import QMessageBox
            QMessageBox.warning(self, '–ü–æ–º–∏–ª–∫–∞', '–ù–∞–∑–≤–∞ –ø—Ä–æ—Ñ—ñ–ª—é –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø—É—Å—Ç–æ—é!')
            return
            
        if not data['user_agent']:
            from PyQt5.QtWidgets import QMessageBox
            QMessageBox.warning(self, '–ü–æ–º–∏–ª–∫–∞', 'User-Agent –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø—É—Å—Ç–∏–º!')
            return
            
        super().accept()
