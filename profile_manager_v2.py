#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
AnDetect Profile Manager v2.0
–†–æ–∑—à–∏—Ä–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è –∑ —ñ–∫–æ–Ω–∫–∞–º–∏, –º—ñ—Ç–∫–∞–º–∏ —Ç–∞ –ø–æ–ª—ñ–ø—à–µ–Ω–∏–º —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
"""

import sys
import os
import subprocess
import json
import shutil
from datetime import datetime, timedelta

from PyQt5.QtWidgets import (QApplication, QMainWindow, QVBoxLayout, QHBoxLayout,
                            QWidget, QPushButton, QListWidget, QListWidgetItem,
                            QMessageBox, QInputDialog, QLabel, QFrame,
                            QSplitter, QScrollArea, QGroupBox, QGridLayout,
                            QLineEdit, QComboBox, QTextEdit, QCheckBox,
                            QProgressBar, QStatusBar, QMenuBar, QAction,
                            QToolBar, QSpacerItem, QSizePolicy, QTabWidget,
                            QFormLayout, QSpinBox, QToolButton, QMenu,
                            QFileDialog, QDialog)
from PyQt5.QtCore import Qt, QThread, pyqtSignal, QTimer, QSize, QSettings
from PyQt5.QtGui import QIcon, QPixmap, QFont, QMovie, QPalette, QColor

# –õ–æ–∫–∞–ª—å–Ω—ñ —ñ–º–ø–æ—Ä—Ç–∏
from browser.profile_manager import ProfileManager, BrowserProfile
from profile_icons import (ProfileIcon, PROFILE_ICONS, COUNTRY_FLAGS, 
                          LABEL_COLORS, get_country_by_timezone,
                          get_browser_icon, get_proxy_type_icon)
from profile_dialog_v2 import ProfileDialogV2

class ProfileWidget(QFrame):
    """–í—ñ–¥–∂–µ—Ç –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∑ —ñ–∫–æ–Ω–∫–∞–º–∏ —Ç–∞ –º—ñ—Ç–∫–∞–º–∏"""
    
    profileSelected = pyqtSignal(str)  # profile_id
    profileLaunched = pyqtSignal(str)  # profile_id
    profileEdited = pyqtSignal(str)    # profile_id
    profileDeleted = pyqtSignal(str)   # profile_id
    
    def __init__(self, profile: BrowserProfile, parent=None):
        super().__init__(parent)
        self.profile = profile
        self.is_running = False
        self.init_ui()
        
    def init_ui(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –≤—ñ–¥–∂–µ—Ç–∞"""
        self.setFrameStyle(QFrame.StyledPanel)
        self.setLineWidth(2)
        self.setFixedHeight(120)
        
        # –û—Å–Ω–æ–≤–Ω–∏–π layout
        layout = QHBoxLayout(self)
        layout.setContentsMargins(10, 10, 10, 10)
        
        # –õ—ñ–≤–∞ —á–∞—Å—Ç–∏–Ω–∞ - —ñ–∫–æ–Ω–∫–∞ –ø—Ä–æ—Ñ—ñ–ª—é
        left_layout = QVBoxLayout()
        
        # –Ü–∫–æ–Ω–∫–∞ –ø—Ä–æ—Ñ—ñ–ª—é
        self.icon_label = QLabel()
        icon = ProfileIcon.create_profile_icon(
            icon_type=getattr(self.profile, 'icon_type', 'default'),
            color=getattr(self.profile, 'label_color', 'blue'),
            size=64
        )
        self.icon_label.setPixmap(icon.pixmap(64, 64))
        self.icon_label.setAlignment(Qt.AlignCenter)
        left_layout.addWidget(self.icon_label)
        
        # –ü—Ä–∞–ø–æ—Ä–µ—Ü—å –∫—Ä–∞—ó–Ω–∏
        self.flag_label = QLabel()
        country_code = getattr(self.profile, 'country_code', 'UA')
        flag_emoji = COUNTRY_FLAGS.get(country_code, 'üåç')
        self.flag_label.setText(flag_emoji)
        self.flag_label.setAlignment(Qt.AlignCenter)
        self.flag_label.setStyleSheet("font-size: 16px;")
        left_layout.addWidget(self.flag_label)
        
        layout.addLayout(left_layout)
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞ —á–∞—Å—Ç–∏–Ω–∞ - —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
        center_layout = QVBoxLayout()
        
        # –ù–∞–∑–≤–∞ –ø—Ä–æ—Ñ—ñ–ª—é
        self.name_label = QLabel(f"<b>{self.profile.name}</b>")
        self.name_label.setStyleSheet("font-size: 14px; font-weight: bold;")
        center_layout.addWidget(self.name_label)
        
        # –û–ø–∏—Å
        description = getattr(self.profile, 'description', '')
        if description:
            self.desc_label = QLabel(description[:50] + "..." if len(description) > 50 else description)
            self.desc_label.setStyleSheet("color: #666; font-size: 11px;")
            center_layout.addWidget(self.desc_label)
        
        # –¢–µ–≥–∏
        tags = getattr(self.profile, 'tags', '')
        if tags:
            self.tags_label = QLabel(f"üè∑Ô∏è {tags}")
            self.tags_label.setStyleSheet("color: #888; font-size: 10px;")
            center_layout.addWidget(self.tags_label)
        
        # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
        info_layout = QHBoxLayout()
        
        # –ë—Ä–∞—É–∑–µ—Ä —ñ–∫–æ–Ω–∫–∞
        browser_icon = get_browser_icon(self.profile.user_agent)
        browser_label = QLabel(browser_icon)
        browser_label.setToolTip("–ë—Ä–∞—É–∑–µ—Ä")
        info_layout.addWidget(browser_label)
        
        # –ü—Ä–æ–∫—Å—ñ —ñ–∫–æ–Ω–∫–∞
        if self.profile.proxy_host:
            proxy_icon = get_proxy_type_icon(self.profile.proxy_type)
            proxy_label = QLabel(proxy_icon)
            proxy_label.setToolTip(f"–ü—Ä–æ–∫—Å—ñ: {self.profile.proxy_type}")
            info_layout.addWidget(proxy_label)
        
        # –£–ª—é–±–ª–µ–Ω–∏–π
        if getattr(self.profile, 'favorite', False):
            fav_label = QLabel("‚≠ê")
            fav_label.setToolTip("–£–ª—é–±–ª–µ–Ω–∏–π")
            info_layout.addWidget(fav_label)
        
        # –°—Ç–∞—Ç—É—Å
        status = getattr(self.profile, 'status', 'active')
        status_icons = {'active': '‚úÖ', 'inactive': '‚è∏Ô∏è', 'blocked': 'üö´'}
        status_label = QLabel(status_icons.get(status, '‚ùì'))
        status_label.setToolTip(f"–°—Ç–∞—Ç—É—Å: {status}")
        info_layout.addWidget(status_label)
        
        info_layout.addStretch()
        center_layout.addLayout(info_layout)
        
        center_layout.addStretch()
        layout.addLayout(center_layout)
        
        # –ü—Ä–∞–≤–∞ —á–∞—Å—Ç–∏–Ω–∞ - –∫–Ω–æ–ø–∫–∏
        right_layout = QVBoxLayout()
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫—É
        self.launch_btn = QPushButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç–∏")
        self.launch_btn.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
            QPushButton:pressed {
                background-color: #3d8b40;
            }
        """)
        self.launch_btn.clicked.connect(self.launch_profile)
        right_layout.addWidget(self.launch_btn)
        
        # –ö–Ω–æ–ø–∫–∏ –∫–µ—Ä—É–≤–∞–Ω–Ω—è
        buttons_layout = QHBoxLayout()
        
        edit_btn = QPushButton("‚úèÔ∏è")
        edit_btn.setToolTip("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏")
        edit_btn.setFixedSize(30, 30)
        edit_btn.clicked.connect(self.edit_profile)
        buttons_layout.addWidget(edit_btn)
        
        delete_btn = QPushButton("üóëÔ∏è")
        delete_btn.setToolTip("–í–∏–¥–∞–ª–∏—Ç–∏")
        delete_btn.setFixedSize(30, 30)
        delete_btn.clicked.connect(self.delete_profile)
        buttons_layout.addWidget(delete_btn)
        
        right_layout.addLayout(buttons_layout)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_layout = QVBoxLayout()
        usage_count = getattr(self.profile, 'usage_count', 0)
        stats_label = QLabel(f"–ó–∞–ø—É—Å–∫—ñ–≤: {usage_count}")
        stats_label.setStyleSheet("font-size: 10px; color: #999;")
        stats_layout.addWidget(stats_label)
        
        last_used = self.profile.last_used
        if last_used:
            try:
                last_time = datetime.fromisoformat(last_used)
                time_diff = datetime.now() - last_time
                if time_diff.days > 0:
                    time_str = f"{time_diff.days} –¥–Ω. —Ç–æ–º—É"
                elif time_diff.seconds > 3600:
                    time_str = f"{time_diff.seconds // 3600} –≥–æ–¥. —Ç–æ–º—É"
                else:
                    time_str = f"{time_diff.seconds // 60} —Ö–≤. —Ç–æ–º—É"
                    
                last_label = QLabel(f"–û—Å—Ç–∞–Ω–Ω—ñ–π: {time_str}")
                last_label.setStyleSheet("font-size: 10px; color: #999;")
                stats_layout.addWidget(last_label)
            except:
                pass
                
        right_layout.addLayout(stats_layout)
        right_layout.addStretch()
        
        layout.addLayout(right_layout)
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∏–ª—é —Ä–∞–º–∫–∏ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Å—Ç–∞—Ç—É—Å—É
        self.update_frame_style()
        
    def update_frame_style(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∏–ª—é —Ä–∞–º–∫–∏ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Å—Ç–∞—Ç—É—Å—É"""
        status = getattr(self.profile, 'status', 'active')
        color = getattr(self.profile, 'label_color', 'blue')
        
        border_color = LABEL_COLORS.get(color, '#4488FF')
        
        if self.is_running:
            border_color = '#FF6B35'  # –ü–æ–º–∞—Ä–∞–Ω—á–µ–≤–∏–π –¥–ª—è –∑–∞–ø—É—â–µ–Ω–∏—Ö
            
        if status == 'inactive':
            border_color = '#999999'
        elif status == 'blocked':
            border_color = '#FF4444'
            
        self.setStyleSheet(f"""
            QFrame {{
                border: 2px solid {border_color};
                border-radius: 8px;
                background-color: white;
            }}
            QFrame:hover {{
                background-color: #f8f9fa;
            }}
        """)
        
    def launch_profile(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ñ—ñ–ª—é"""
        self.profileLaunched.emit(self.profile.id)
        
    def edit_profile(self):
        """–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é"""
        self.profileEdited.emit(self.profile.id)
        
    def delete_profile(self):
        """–í–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é"""
        reply = QMessageBox.question(
            self, '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è', 
            f'–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å "{self.profile.name}"?',
            QMessageBox.Yes | QMessageBox.No, 
            QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            self.profileDeleted.emit(self.profile.id)
            
    def set_running(self, running: bool):
        """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–∞–ø—É—Å–∫—É"""
        self.is_running = running
        if running:
            self.launch_btn.setText("‚èπÔ∏è –ó—É–ø–∏–Ω–∏—Ç–∏")
            self.launch_btn.setStyleSheet("""
                QPushButton {
                    background-color: #FF6B35;
                    color: white;
                    border: none;
                    padding: 8px 16px;
                    border-radius: 4px;
                    font-weight: bold;
                }
                QPushButton:hover {
                    background-color: #e55a2d;
                }
            """)
        else:
            self.launch_btn.setText("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç–∏")
            self.launch_btn.setStyleSheet("""
                QPushButton {
                    background-color: #4CAF50;
                    color: white;
                    border: none;
                    padding: 8px 16px;
                    border-radius: 4px;
                    font-weight: bold;
                }
                QPushButton:hover {
                    background-color: #45a049;
                }
            """)
        self.update_frame_style()


class ChromeManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∑–∞–ø—É—Å–∫—É Chrome –∑ –ø—Ä–æ—Ñ—ñ–ª—è–º–∏"""
    
    def __init__(self):
        self.running_profiles = {}  # profile_id -> process
        
    def launch_profile(self, profile: BrowserProfile, url="https://www.google.com"):
        """–ó–∞–ø—É—Å–∫ Chrome –∑ –ø—Ä–æ—Ñ—ñ–ª–µ–º"""
        try:
            profile_dir = self.create_profile_directory(profile)
            chrome_flags = self.generate_chrome_flags(profile, profile_dir)
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è –¥–ª—è –∞–≤—Ç–æ-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –ø—Ä–æ–∫—Å—ñ
            if profile.proxy_username and profile.proxy_password:
                ext_dir = self.create_proxy_auth_extension(profile)
                chrome_flags.extend([
                    f'--load-extension={ext_dir}',
                    f'--disable-extensions-except={ext_dir}'
                ])
            
            chrome_flags.append(url)
            
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ Chrome
            process = subprocess.Popen(chrome_flags)
            self.running_profiles[profile.id] = process
            
            print(f"‚úÖ –ü—Ä–æ—Ñ—ñ–ª—å '{profile.name}' –∑–∞–ø—É—â–µ–Ω–æ (PID: {process.pid})")
            return True
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –ø—Ä–æ—Ñ—ñ–ª—é: {e}")
            return False
            
    def stop_profile(self, profile_id: str):
        """–ó—É–ø–∏–Ω–∫–∞ –ø—Ä–æ—Ñ—ñ–ª—é"""
        if profile_id in self.running_profiles:
            process = self.running_profiles[profile_id]
            try:
                process.terminate()
                del self.running_profiles[profile_id]
                return True
            except:
                return False
        return False
        
    def is_profile_running(self, profile_id: str) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∑–∞–ø—É—â–µ–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å"""
        if profile_id in self.running_profiles:
            process = self.running_profiles[profile_id]
            return process.poll() is None
        return False
        
    def create_profile_directory(self, profile: BrowserProfile) -> str:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –ø—Ä–æ—Ñ—ñ–ª—é Chrome"""
        base_dir = os.path.join(os.path.expanduser("~"), "AnDetectBrowser", "chrome_profiles")
        profile_dir = os.path.join(base_dir, profile.id)
        
        os.makedirs(profile_dir, exist_ok=True)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ preferences.json
        prefs = {
            "profile": {
                "default_content_setting_values": {
                    "geolocation": 1 if profile.geolocation_enabled else 2,
                    "notifications": 1 if profile.notifications_enabled else 2,
                    "media_stream": 1 if profile.webrtc_enabled else 2,
                }
            },
            "homepage": "https://www.google.com",
            "session": {
                "restore_on_startup": 1,
                "startup_urls": ["https://www.google.com"]
            }
        }
        
        prefs_path = os.path.join(profile_dir, "Default", "Preferences")
        os.makedirs(os.path.dirname(prefs_path), exist_ok=True)
        
        with open(prefs_path, 'w', encoding='utf-8') as f:
            json.dump(prefs, f, indent=2)
            
        return profile_dir
        
    def generate_chrome_flags(self, profile: BrowserProfile, profile_dir: str) -> list:
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–∞–ø–æ—Ä—Ü—ñ–≤ –¥–ª—è Chrome"""
        chrome_path = self.find_chrome_executable()
        
        flags = [
            chrome_path,
            f'--user-data-dir={profile_dir}',
            f'--user-agent={profile.user_agent}',
            '--no-first-run',
            '--no-default-browser-check',
            '--disable-default-apps',
            '--disable-background-timer-throttling',
            '--disable-renderer-backgrounding',
            '--disable-backgrounding-occluded-windows',
            f'--window-size={profile.screen_width},{profile.screen_height}',
        ]
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è JavaScript
        if not profile.javascript_enabled:
            flags.append('--disable-javascript')
            
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å
        if not profile.images_enabled:
            flags.append('--disable-images')
            
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è WebRTC
        if not profile.webrtc_enabled:
            flags.extend([
                '--disable-webrtc',
                '--disable-webrtc-hw-decoding',
                '--disable-webrtc-hw-encoding'
            ])
            
        # –ü—Ä–æ–∫—Å—ñ
        if profile.proxy_host:
            if profile.proxy_type == 'SOCKS5':
                flags.append(f'--proxy-server=socks5://{profile.proxy_host}:{profile.proxy_port}')
            else:
                flags.append(f'--proxy-server=http://{profile.proxy_host}:{profile.proxy_port}')
                
        return flags
        
    def find_chrome_executable(self) -> str:
        """–ü–æ—à—É–∫ –≤–∏–∫–æ–Ω—É–≤–∞–Ω–æ–≥–æ —Ñ–∞–π–ª—É Chrome"""
        possible_paths = [
            r"C:\Program Files\Google\Chrome\Application\chrome.exe",
            r"C:\Program Files (x86)\Google\Chrome\Application\chrome.exe",
            r"C:\Users\{}\AppData\Local\Google\Chrome\Application\chrome.exe".format(os.getenv('USERNAME')),
            "google-chrome",
            "chromium-browser",
            "chrome"
        ]
        
        for path in possible_paths:
            if os.path.isfile(path):
                return path
            elif shutil.which(path):
                return shutil.which(path)
                
        raise FileNotFoundError("Chrome –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—ñ")
        
    def create_proxy_auth_extension(self, profile: BrowserProfile) -> str:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –ø—Ä–æ–∫—Å—ñ"""
        ext_dir = os.path.join(os.path.expanduser("~"), "AnDetectBrowser", "proxy_auth_ext", profile.id)
        os.makedirs(ext_dir, exist_ok=True)
        
        # manifest.json
        manifest = {
            "manifest_version": 2,
            "name": "Proxy Auth",
            "version": "1.0",
            "permissions": ["webRequest", "webRequestBlocking", "<all_urls>"],
            "background": {
                "scripts": ["background.js"],
                "persistent": True
            }
        }
        
        with open(os.path.join(ext_dir, "manifest.json"), 'w') as f:
            json.dump(manifest, f, indent=2)
            
        # background.js
        background_js = f"""
chrome.webRequest.onAuthRequired.addListener(
    function(details) {{
        return {{
            authCredentials: {{
                username: "{profile.proxy_username}",
                password: "{profile.proxy_password}"
            }}
        }};
    }},
    {{urls: ["<all_urls>"]}},
    ["blocking"]
);
"""
        
        with open(os.path.join(ext_dir, "background.js"), 'w') as f:
            f.write(background_js)
            
        return ext_dir


class AnDetectMainWindow(QMainWindow):
    """–ì–æ–ª–æ–≤–Ω–µ –≤—ñ–∫–Ω–æ AnDetect Profile Manager v2.0"""
    
    def __init__(self):
        super().__init__()
        self.profile_manager = ProfileManager()
        self.chrome_manager = ChromeManager()
        self.settings = QSettings("AnDetect", "ProfileManager")
        
        self.setWindowTitle("AnDetect Profile Manager v2.0")
        self.setMinimumSize(1200, 800)
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —ñ–∫–æ–Ω–∫—É –ø—Ä–æ–≥—Ä–∞–º–∏
        if os.path.exists("logo.png"):
            self.setWindowIcon(QIcon("logo.png"))
        elif os.path.exists("icon.ico"):
            self.setWindowIcon(QIcon("icon.ico"))
            
        self.init_ui()
        self.load_profiles()
        
        # –¢–∞–π–º–µ—Ä –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—ñ–≤
        self.update_timer = QTimer()
        self.update_timer.timeout.connect(self.update_running_status)
        self.update_timer.start(2000)  # –ö–æ–∂–Ω—ñ 2 —Å–µ–∫—É–Ω–¥–∏
        
    def init_ui(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
        # –ú–µ–Ω—é
        self.create_menu()
        
        # –ü–∞–Ω–µ–ª—å —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤
        self.create_toolbar()
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∏–π –≤—ñ–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        layout = QHBoxLayout(central_widget)
        
        # –õ—ñ–≤–∞ –ø–∞–Ω–µ–ª—å - —Ñ—ñ–ª—å—Ç—Ä–∏
        self.create_filter_panel(layout)
        
        # –ü—Ä–∞–≤–∞ –ø–∞–Ω–µ–ª—å - –ø—Ä–æ—Ñ—ñ–ª—ñ
        self.create_profiles_panel(layout)
        
        # –°—Ç–∞—Ç—É—Å–Ω–∞ –ø–∞–Ω–µ–ª—å
        self.statusBar().showMessage("AnDetect Profile Manager v2.0 –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏")
        
    def create_menu(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–µ–Ω—é"""
        menubar = self.menuBar()
        
        # –§–∞–π–ª
        file_menu = menubar.addMenu('–§–∞–π–ª')
        
        new_action = QAction('–ù–æ–≤–∏–π –ø—Ä–æ—Ñ—ñ–ª—å', self)
        new_action.setShortcut('Ctrl+N')
        new_action.triggered.connect(self.create_new_profile)
        file_menu.addAction(new_action)
        
        file_menu.addSeparator()
        
        import_action = QAction('–Ü–º–ø–æ—Ä—Ç –ø—Ä–æ—Ñ—ñ–ª—ñ–≤', self)
        import_action.triggered.connect(self.import_profiles)
        file_menu.addAction(import_action)
        
        export_action = QAction('–ï–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ—Ñ—ñ–ª—ñ–≤', self)
        export_action.triggered.connect(self.export_profiles)
        file_menu.addAction(export_action)
        
        file_menu.addSeparator()
        
        exit_action = QAction('–í–∏—Ö—ñ–¥', self)
        exit_action.setShortcut('Ctrl+Q')
        exit_action.triggered.connect(self.close)
        file_menu.addAction(exit_action)
        
        # –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏
        tools_menu = menubar.addMenu('–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏')
        
        settings_action = QAction('–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è', self)
        settings_action.triggered.connect(self.show_settings)
        tools_menu.addAction(settings_action)
        
        cleanup_action = QAction('–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–∏—Ö', self)
        cleanup_action.triggered.connect(self.cleanup_data)
        tools_menu.addAction(cleanup_action)
        
        # –î–æ–≤—ñ–¥–∫–∞
        help_menu = menubar.addMenu('–î–æ–≤—ñ–¥–∫–∞')
        
        about_action = QAction('–ü—Ä–æ –ø—Ä–æ–≥—Ä–∞–º—É', self)
        about_action.triggered.connect(self.show_about)
        help_menu.addAction(about_action)
        
    def create_toolbar(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–Ω–µ–ª—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤"""
        toolbar = QToolBar()
        self.addToolBar(toolbar)
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é
        new_btn = QToolButton()
        new_btn.setText("‚ûï –ù–æ–≤–∏–π")
        new_btn.setToolButtonStyle(Qt.ToolButtonTextBesideIcon)
        new_btn.clicked.connect(self.create_new_profile)
        toolbar.addWidget(new_btn)
        
        toolbar.addSeparator()
        
        # –§—ñ–ª—å—Ç—Ä –ø–æ—à—É–∫—É
        self.search_edit = QLineEdit()
        self.search_edit.setPlaceholderText("üîç –ü–æ—à—É–∫ –ø—Ä–æ—Ñ—ñ–ª—ñ–≤...")
        self.search_edit.setMaximumWidth(200)
        self.search_edit.textChanged.connect(self.filter_profiles)
        toolbar.addWidget(self.search_edit)
        
        toolbar.addSeparator()
        
        # –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
        sort_combo = QComboBox()
        sort_combo.addItems([
            "–ó–∞ –¥–∞—Ç–æ—é –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è",
            "–ó–∞ –Ω–∞–∑–≤–æ—é",
            "–ó–∞ —Å—Ç–∞—Ç—É—Å–æ–º",
            "–ó–∞ —É–ª—é–±–ª–µ–Ω–∏–º–∏"
        ])
        sort_combo.currentTextChanged.connect(self.sort_profiles)
        toolbar.addWidget(sort_combo)
        
    def create_filter_panel(self, parent_layout):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–Ω–µ–ª—ñ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤"""
        filter_frame = QFrame()
        filter_frame.setFrameStyle(QFrame.StyledPanel)
        filter_frame.setMaximumWidth(250)
        
        layout = QVBoxLayout(filter_frame)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("üéõÔ∏è –§—ñ–ª—å—Ç—Ä–∏")
        title.setStyleSheet("font-size: 16px; font-weight: bold; padding: 5px;")
        layout.addWidget(title)
        
        # –°—Ç–∞—Ç—É—Å
        status_group = QGroupBox("–°—Ç–∞—Ç—É—Å")
        status_layout = QVBoxLayout(status_group)
        
        self.status_all = QCheckBox("–í—Å—ñ")
        self.status_all.setChecked(True)
        self.status_all.toggled.connect(self.filter_profiles)
        status_layout.addWidget(self.status_all)
        
        self.status_active = QCheckBox("–ê–∫—Ç–∏–≤–Ω—ñ")
        self.status_active.toggled.connect(self.filter_profiles)
        status_layout.addWidget(self.status_active)
        
        self.status_inactive = QCheckBox("–ù–µ–∞–∫—Ç–∏–≤–Ω—ñ")
        self.status_inactive.toggled.connect(self.filter_profiles)
        status_layout.addWidget(self.status_inactive)
        
        self.status_running = QCheckBox("–ó–∞–ø—É—â–µ–Ω—ñ")
        self.status_running.toggled.connect(self.filter_profiles)
        status_layout.addWidget(self.status_running)
        
        layout.addWidget(status_group)
        
        # –¢–∏–ø–∏ –ø—Ä–æ—Ñ—ñ–ª—ñ–≤
        type_group = QGroupBox("–¢–∏–ø–∏")
        type_layout = QVBoxLayout(type_group)
        
        self.type_combos = {}
        for icon_type, emoji in list(PROFILE_ICONS.items())[:10]:  # –ü–µ—Ä—à—ñ 10
            check = QCheckBox(f"{emoji} {icon_type.replace('_', ' ').title()}")
            check.toggled.connect(self.filter_profiles)
            type_layout.addWidget(check)
            self.type_combos[icon_type] = check
            
        layout.addWidget(type_group)
        
        # –ö—Ä–∞—ó–Ω–∏
        country_group = QGroupBox("–ö—Ä–∞—ó–Ω–∏")
        country_layout = QVBoxLayout(country_group)
        
        self.country_combos = {}
        for country_code, flag in list(COUNTRY_FLAGS.items())[:10]:  # –ü–µ—Ä—à—ñ 10
            check = QCheckBox(f"{flag} {country_code}")
            check.toggled.connect(self.filter_profiles)
            country_layout.addWidget(check)
            self.country_combos[country_code] = check
            
        layout.addWidget(country_group)
        
        layout.addStretch()
        parent_layout.addWidget(filter_frame)
        
    def create_profiles_panel(self, parent_layout):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–Ω–µ–ª—ñ –ø—Ä–æ—Ñ—ñ–ª—ñ–≤"""
        profiles_frame = QFrame()
        layout = QVBoxLayout(profiles_frame)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑ –ª—ñ—á–∏–ª—å–Ω–∏–∫–æ–º
        header_layout = QHBoxLayout()
        self.profiles_title = QLabel("üìÅ –ü—Ä–æ—Ñ—ñ–ª—ñ")
        self.profiles_title.setStyleSheet("font-size: 16px; font-weight: bold;")
        header_layout.addWidget(self.profiles_title)
        
        self.profiles_count = QLabel("(0)")
        self.profiles_count.setStyleSheet("color: #666;")
        header_layout.addWidget(self.profiles_count)
        
        header_layout.addStretch()
        layout.addLayout(header_layout)
        
        # –°–∫—Ä–æ–ª –æ–±–ª–∞—Å—Ç—å –¥–ª—è –ø—Ä–æ—Ñ—ñ–ª—ñ–≤
        scroll = QScrollArea()
        scroll.setWidgetResizable(True)
        scroll.setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        scroll.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        
        self.profiles_widget = QWidget()
        self.profiles_layout = QVBoxLayout(self.profiles_widget)
        self.profiles_layout.setAlignment(Qt.AlignTop)
        
        scroll.setWidget(self.profiles_widget)
        layout.addWidget(scroll)
        
        parent_layout.addWidget(profiles_frame)
        
    def load_profiles(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—ñ–≤"""
        try:
            profiles = self.profile_manager.get_all_profiles()
            self.display_profiles(profiles)
            self.update_profiles_count(len(profiles))
            
        except Exception as e:
            QMessageBox.critical(self, "–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—ñ: {e}")
            
    def display_profiles(self, profiles):
        """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—ñ–≤"""
        # –û—á–∏—â–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –≤—ñ–¥–∂–µ—Ç–∏
        for i in reversed(range(self.profiles_layout.count())):
            child = self.profiles_layout.itemAt(i).widget()
            if child:
                child.setParent(None)
                
        # –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ –≤—ñ–¥–∂–µ—Ç–∏
        for profile in profiles:
            widget = ProfileWidget(profile)
            widget.profileLaunched.connect(self.launch_profile)
            widget.profileEdited.connect(self.edit_profile)
            widget.profileDeleted.connect(self.delete_profile)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–∞–ø—É—â–µ–Ω–∏–π
            if self.chrome_manager.is_profile_running(profile.id):
                widget.set_running(True)
                
            self.profiles_layout.addWidget(widget)
            
        # –î–æ–¥–∞—î–º–æ –ø—Ä–æ—Å—Ç—ñ—Ä –≤–Ω–∏–∑—É
        self.profiles_layout.addStretch()
        
    def update_profiles_count(self, count):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ –ø—Ä–æ—Ñ—ñ–ª—ñ–≤"""
        self.profiles_count.setText(f"({count})")
        
    def create_new_profile(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é"""
        dialog = ProfileDialogV2(self)
        if dialog.exec_() == QDialog.Accepted:
            try:
                data = dialog.get_profile_data()
                profile = self.profile_manager.create_profile(data['name'], data)
                self.load_profiles()
                self.statusBar().showMessage(f"–ü—Ä–æ—Ñ—ñ–ª—å '{data['name']}' —Å—Ç–≤–æ—Ä–µ–Ω–æ", 3000)
                
            except Exception as e:
                QMessageBox.critical(self, "–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å: {e}")
                
    def edit_profile(self, profile_id):
        """–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é"""
        try:
            profile = self.profile_manager.get_profile_by_id(profile_id)
            if not profile:
                QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", "–ü—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return
                
            dialog = ProfileDialogV2(self, profile)
            if dialog.exec_() == QDialog.Accepted:
                data = dialog.get_profile_data()
                self.profile_manager.update_profile(profile_id, data)
                self.load_profiles()
                self.statusBar().showMessage(f"–ü—Ä–æ—Ñ—ñ–ª—å '{data['name']}' –æ–Ω–æ–≤–ª–µ–Ω–æ", 3000)
                
        except Exception as e:
            QMessageBox.critical(self, "–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å: {e}")
            
    def delete_profile(self, profile_id):
        """–í–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é"""
        try:
            # –ó—É–ø–∏–Ω—è—î–º–æ —è–∫—â–æ –∑–∞–ø—É—â–µ–Ω–∏–π
            if self.chrome_manager.is_profile_running(profile_id):
                self.chrome_manager.stop_profile(profile_id)
                
            self.profile_manager.delete_profile(profile_id)
            self.load_profiles()
            self.statusBar().showMessage("–ü—Ä–æ—Ñ—ñ–ª—å –≤–∏–¥–∞–ª–µ–Ω–æ", 3000)
            
        except Exception as e:
            QMessageBox.critical(self, "–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å: {e}")
            
    def launch_profile(self, profile_id):
        """–ó–∞–ø—É—Å–∫/–∑—É–ø–∏–Ω–∫–∞ –ø—Ä–æ—Ñ—ñ–ª—é"""
        try:
            if self.chrome_manager.is_profile_running(profile_id):
                # –ó—É–ø–∏–Ω—è—î–º–æ
                if self.chrome_manager.stop_profile(profile_id):
                    self.statusBar().showMessage("–ü—Ä–æ—Ñ—ñ–ª—å –∑—É–ø–∏–Ω–µ–Ω–æ", 3000)
                else:
                    QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑—É–ø–∏–Ω–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å")
            else:
                # –ó–∞–ø—É—Å–∫–∞—î–º–æ
                profile = self.profile_manager.get_profile_by_id(profile_id)
                if profile:
                    if self.chrome_manager.launch_profile(profile):
                        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                        usage_count = getattr(profile, 'usage_count', 0) + 1
                        self.profile_manager.update_profile(profile_id, {
                            'usage_count': usage_count,
                            'last_used': datetime.now().isoformat()
                        })
                        self.statusBar().showMessage(f"–ü—Ä–æ—Ñ—ñ–ª—å '{profile.name}' –∑–∞–ø—É—â–µ–Ω–æ", 3000)
                    else:
                        QMessageBox.critical(self, "–ü–æ–º–∏–ª–∫–∞", "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å")
                        
            self.update_running_status()
            
        except Exception as e:
            QMessageBox.critical(self, "–ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –ø—Ä–æ—Ñ—ñ–ª—é: {e}")
            
    def update_running_status(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–∞–ø—É—â–µ–Ω–∏—Ö –ø—Ä–æ—Ñ—ñ–ª—ñ–≤"""
        for i in range(self.profiles_layout.count() - 1):  # -1 –¥–ª—è stretch
            widget = self.profiles_layout.itemAt(i).widget()
            if isinstance(widget, ProfileWidget):
                is_running = self.chrome_manager.is_profile_running(widget.profile.id)
                widget.set_running(is_running)
                
    def filter_profiles(self):
        """–§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –ø—Ä–æ—Ñ—ñ–ª—ñ–≤"""
        search_text = self.search_edit.text().lower()
        
        try:
            all_profiles = self.profile_manager.get_all_profiles()
            filtered_profiles = []
            
            for profile in all_profiles:
                # –ü–æ—à—É–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
                if search_text:
                    searchable_text = f"{profile.name} {getattr(profile, 'description', '')} {getattr(profile, 'tags', '')}".lower()
                    if search_text not in searchable_text:
                        continue
                
                # –§—ñ–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
                if not self.status_all.isChecked():
                    status = getattr(profile, 'status', 'active')
                    if self.status_active.isChecked() and status != 'active':
                        continue
                    if self.status_inactive.isChecked() and status != 'inactive':
                        continue
                    if self.status_running.isChecked() and not self.chrome_manager.is_profile_running(profile.id):
                        continue
                
                # –§—ñ–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É
                icon_type = getattr(profile, 'icon_type', 'default')
                if icon_type in self.type_combos:
                    if self.type_combos[icon_type].isChecked():
                        pass  # –≤–∫–ª—é—á–∞—î–º–æ
                    else:
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Ç–∏–ø –≤–∏–±—Ä–∞–Ω–æ
                        any_type_selected = any(cb.isChecked() for cb in self.type_combos.values())
                        if any_type_selected:
                            continue
                            
                # –§—ñ–ª—å—Ç—Ä –ø–æ –∫—Ä–∞—ó–Ω—ñ
                country_code = getattr(profile, 'country_code', 'UA')
                if country_code in self.country_combos:
                    if self.country_combos[country_code].isChecked():
                        pass  # –≤–∫–ª—é—á–∞—î–º–æ
                    else:
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ö–æ—á–∞ –± –æ–¥–Ω—É –∫—Ä–∞—ó–Ω—É –≤–∏–±—Ä–∞–Ω–æ
                        any_country_selected = any(cb.isChecked() for cb in self.country_combos.values())
                        if any_country_selected:
                            continue
                
                filtered_profiles.append(profile)
                
            self.display_profiles(filtered_profiles)
            self.update_profiles_count(len(filtered_profiles))
            
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó: {e}")
            
    def sort_profiles(self, sort_type):
        """–°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—ñ–≤"""
        try:
            profiles = self.profile_manager.get_all_profiles()
            
            if sort_type == "–ó–∞ –Ω–∞–∑–≤–æ—é":
                profiles.sort(key=lambda p: p.name.lower())
            elif sort_type == "–ó–∞ —Å—Ç–∞—Ç—É—Å–æ–º":
                profiles.sort(key=lambda p: getattr(p, 'status', 'active'))
            elif sort_type == "–ó–∞ —É–ª—é–±–ª–µ–Ω–∏–º–∏":
                profiles.sort(key=lambda p: getattr(p, 'favorite', False), reverse=True)
            # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - –∑–∞ –¥–∞—Ç–æ—é –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è (–≤–∂–µ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–æ)
            
            self.display_profiles(profiles)
            
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è: {e}")
            
    def import_profiles(self):
        """–Ü–º–ø–æ—Ä—Ç –ø—Ä–æ—Ñ—ñ–ª—ñ–≤"""
        file_path, _ = QFileDialog.getOpenFileName(
            self, "–Ü–º–ø–æ—Ä—Ç –ø—Ä–æ—Ñ—ñ–ª—ñ–≤", "", "JSON files (*.json)"
        )
        
        if file_path:
            try:
                # TODO: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —ñ–º–ø–æ—Ä—Ç
                QMessageBox.information(self, "–Ü–º–ø–æ—Ä—Ç", "–§—É–Ω–∫—Ü—ñ—è —ñ–º–ø–æ—Ä—Ç—É –±—É–¥–µ –¥–æ–¥–∞–Ω–∞ –≤ –Ω–∞—Å—Ç—É–ø–Ω—ñ–π –≤–µ—Ä—Å—ñ—ó")
            except Exception as e:
                QMessageBox.critical(self, "–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—ñ: {e}")
                
    def export_profiles(self):
        """–ï–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ—Ñ—ñ–ª—ñ–≤"""
        file_path, _ = QFileDialog.getSaveFileName(
            self, "–ï–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ—Ñ—ñ–ª—ñ–≤", "profiles_export.json", "JSON files (*.json)"
        )
        
        if file_path:
            try:
                # TODO: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –µ–∫—Å–ø–æ—Ä—Ç
                QMessageBox.information(self, "–ï–∫—Å–ø–æ—Ä—Ç", "–§—É–Ω–∫—Ü—ñ—è –µ–∫—Å–ø–æ—Ä—Ç—É –±—É–¥–µ –¥–æ–¥–∞–Ω–∞ –≤ –Ω–∞—Å—Ç—É–ø–Ω—ñ–π –≤–µ—Ä—Å—ñ—ó")
            except Exception as e:
                QMessageBox.critical(self, "–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –µ–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—ñ: {e}")
                
    def show_settings(self):
        """–ü–æ–∫–∞–∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
        QMessageBox.information(self, "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", "–í—ñ–∫–Ω–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –±—É–¥–µ –¥–æ–¥–∞–Ω–æ –≤ –Ω–∞—Å—Ç—É–ø–Ω—ñ–π –≤–µ—Ä—Å—ñ—ó")
        
    def cleanup_data(self):
        """–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–∏—Ö"""
        reply = QMessageBox.question(
            self, '–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–∏—Ö', 
            '–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —Ç–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏?',
            QMessageBox.Yes | QMessageBox.No, 
            QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            try:
                # TODO: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –æ—á–∏—Å—Ç–∫—É
                QMessageBox.information(self, "–û—á–∏—Å—Ç–∫–∞", "–¢–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏ –≤–∏–¥–∞–ª–µ–Ω–æ")
            except Exception as e:
                QMessageBox.critical(self, "–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—á–∏—Å—Ç–∏—Ç–∏ –¥–∞–Ω—ñ: {e}")
                
    def show_about(self):
        """–ü–æ–∫–∞–∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø—Ä–æ–≥—Ä–∞–º—É"""
        QMessageBox.about(self, "–ü—Ä–æ –ø—Ä–æ–≥—Ä–∞–º—É", """
<h2>AnDetect Profile Manager v2.0</h2>
<p><b>–†–æ–∑—à–∏—Ä–µ–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ—Ñ—ñ–ª—ñ–≤ –±—Ä–∞—É–∑–µ—Ä–∞</b></p>
<p>–§—É–Ω–∫—Ü—ñ—ó:</p>
<ul>
<li>üé® –Ü–∫–æ–Ω–∫–∏ —Ç–∞ –º—ñ—Ç–∫–∏ –ø—Ä–æ—Ñ—ñ–ª—ñ–≤</li>
<li>üåç –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –∫—Ä–∞—ó–Ω —Ç–∞ –ø—Ä–∞–ø–æ—Ä—Ü—ñ–≤</li>
<li>üîê –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –ø—Ä–æ–∫—Å—ñ</li>
<li>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è</li>
<li>üéØ –†–æ–∑—à–∏—Ä–µ–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏</li>
<li>‚ö° –®–≤–∏–¥–∫–∏–π –∑–∞–ø—É—Å–∫</li>
</ul>
<p>¬© 2024 AnDetect Team</p>
        """)
        
    def closeEvent(self, event):
        """–û–±—Ä–æ–±–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø—Ä–æ–≥—Ä–∞–º–∏"""
        # –ó—É–ø–∏–Ω—è—î–º–æ –≤—Å—ñ –∑–∞–ø—É—â–µ–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—ñ
        for profile_id in list(self.chrome_manager.running_profiles.keys()):
            self.chrome_manager.stop_profile(profile_id)
            
        event.accept()


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    app = QApplication(sys.argv)
    app.setApplicationName("AnDetect Profile Manager")
    app.setApplicationVersion("2.0")
    
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∏–ª—å
    app.setStyle('Fusion')
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –≤—ñ–∫–Ω–æ
    window = AnDetectMainWindow()
    window.show()
    
    sys.exit(app.exec_())


if __name__ == "__main__":
    main()
