<<<<<<< HEAD
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–∫—Å—ñ –≤ —Ñ–æ—Ä–º–∞—Ç—ñ IP:PORT:USER:PASS
"""

import subprocess
import os
import tempfile
import json

def test_proxy_with_auth(proxy_string):
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–∫—Å—ñ –∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—î—é"""
    
    parts = proxy_string.split(':')
    if len(parts) != 4:
        print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: IP:PORT:USER:PASS")
        return False
    
    host, port, username, password = parts
    
    print(f"üîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–∫—Å—ñ:")
    print(f"   –•–æ—Å—Ç: {host}")
    print(f"   –ü–æ—Ä—Ç: {port}")
    print(f"   –õ–æ–≥—ñ–Ω: {username}")
    print(f"   –ü–∞—Ä–æ–ª—å: {'*' * len(password)}")
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ Chrome
    chrome_paths = [
        r"C:\Program Files\Google\Chrome\Application\chrome.exe",
        r"C:\Program Files (x86)\Google\Chrome\Application\chrome.exe"
    ]
    
    chrome_exe = None
    for path in chrome_paths:
        if os.path.exists(path):
            chrome_exe = path
            break
    
    if not chrome_exe:
        print("‚ùå Chrome –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return False
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π –ø—Ä–æ—Ñ—ñ–ª—å
    temp_dir = tempfile.mkdtemp(prefix="andetect_proxy_test_")
    extension_dir = os.path.join(temp_dir, "proxy_auth_extension")
    os.makedirs(extension_dir, exist_ok=True)
    
    print(f"üìÅ –¢–∏–º—á–∞—Å–æ–≤–∏–π –ø—Ä–æ—Ñ—ñ–ª—å: {temp_dir}")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
    manifest = {
        "manifest_version": 2,
        "name": "Proxy Auth Test",
        "version": "1.0",
        "description": "Test proxy authentication",
        "permissions": [
            "webRequest",
            "webRequestBlocking",
            "<all_urls>",
            "proxy"
        ],
        "background": {
            "scripts": ["background.js"],
            "persistent": True
        }
    }
    
    with open(os.path.join(extension_dir, "manifest.json"), 'w') as f:
        json.dump(manifest, f, indent=2)
    
    background_js = f"""
chrome.webRequest.onAuthRequired.addListener(
    function(details) {{
        console.log('üîê Proxy auth required for:', details.url);
        console.log('üîë Using credentials: {username}');
        return {{
            authCredentials: {{
                username: '{username}',
                password: '{password}'
            }}
        }};
    }},
    {{urls: ["<all_urls>"]}},
    ["blocking"]
);

console.log('‚úÖ Proxy Auth Extension loaded');
console.log('üåê Ready for proxy: {host}:{port}');
"""
    
    with open(os.path.join(extension_dir, "background.js"), 'w') as f:
        f.write(background_js)
    
    # –§–ª–∞–≥–∏ Chrome
    flags = [
        f"--user-data-dir={temp_dir}",
        "--no-first-run",
        "--no-default-browser-check",
        f"--proxy-server=http://{host}:{port}",
        f"--load-extension={extension_dir}",
        "--disable-extensions-except=" + extension_dir,
        "https://httpbin.org/ip"  # –°–∞–π—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ IP
    ]
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ Chrome –∑ –ø—Ä–æ–∫—Å—ñ...")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {chrome_exe} {' '.join(flags[:5])}...")
    
    try:
        process = subprocess.Popen([chrome_exe] + flags)
        print(f"‚úÖ Chrome –∑–∞–ø—É—â–µ–Ω–æ! PID: {process.pid}")
        print("üîç –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä—ñ:")
        print("   1. –í—ñ–¥–∫—Ä–∏–ª–∞—Å—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞ httpbin.org/ip")
        print(f"   2. IP-–∞–¥—Ä–µ—Å–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –ø—Ä–æ–∫—Å—ñ: {host}")
        print("   3. –ù–µ–º–∞—î –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é")
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É Chrome: {e}")
        return False

def main():
    print("=" * 60)
    print("        –¢–µ—Å—Ç –ø—Ä–æ–∫—Å—ñ –∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—î—é –¥–ª—è AnDetect")
    print("=" * 60)
    print()
    
    proxy_example = "45.158.61.63:46130:RQQ6C0VF:MZH4VXZU"
    proxy_input = input(f"–í–≤–µ–¥—ñ—Ç—å –ø—Ä–æ–∫—Å—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ IP:PORT:USER:PASS\n(–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è —Ç–µ—Å—Ç—É –∑ –ø—Ä–∏–∫–ª–∞–¥–æ–º):\n> ").strip()
    
    if not proxy_input:
        proxy_input = proxy_example
        print(f"üìù –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –ø—Ä–∏–∫–ª–∞–¥: {proxy_input}")
    
    print()
    if test_proxy_with_auth(proxy_input):
        print()
        print("‚úÖ –¢–µ—Å—Ç –∑–∞–ø—É—â–µ–Ω–æ! –Ø–∫—â–æ –≤—Å–µ –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ:")
        print("   - –ù–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ httpbin.org/ip –±—É–¥–µ –ø–æ–∫–∞–∑–∞–Ω–æ IP –≤–∞—à–æ–≥–æ –ø—Ä–æ–∫—Å—ñ")
        print("   - –ù–µ –±—É–¥—É—Ç—å –∑'—è–≤–ª—è—Ç–∏—Å—è –¥—ñ–∞–ª–æ–≥–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó")
        print("   - –£ –∫–æ–Ω—Å–æ–ª—ñ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞ (F12) –±—É–¥—É—Ç—å –ª–æ–≥–∏ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è")
    else:
        print()
        print("‚ùå –¢–µ—Å—Ç –Ω–µ –≤–¥–∞–≤—Å—è. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ:")
        print("   - –ü—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç—É –ø—Ä–æ–∫—Å—ñ")
        print("   - –î–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å –ø—Ä–æ–∫—Å—ñ")
        print("   - –ü—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –ª–æ–≥—ñ–Ω–∞/–ø–∞—Ä–æ–ª—é")
    
    input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –≤–∏—Ö–æ–¥—É...")

if __name__ == "__main__":
    main()
=======
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–∫—Å—ñ –≤ —Ñ–æ—Ä–º–∞—Ç—ñ IP:PORT:USER:PASS
"""

import subprocess
import os
import tempfile
import json

def test_proxy_with_auth(proxy_string):
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–∫—Å—ñ –∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—î—é"""
    
    parts = proxy_string.split(':')
    if len(parts) != 4:
        print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: IP:PORT:USER:PASS")
        return False
    
    host, port, username, password = parts
    
    print(f"üîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–∫—Å—ñ:")
    print(f"   –•–æ—Å—Ç: {host}")
    print(f"   –ü–æ—Ä—Ç: {port}")
    print(f"   –õ–æ–≥—ñ–Ω: {username}")
    print(f"   –ü–∞—Ä–æ–ª—å: {'*' * len(password)}")
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ Chrome
    chrome_paths = [
        r"C:\Program Files\Google\Chrome\Application\chrome.exe",
        r"C:\Program Files (x86)\Google\Chrome\Application\chrome.exe"
    ]
    
    chrome_exe = None
    for path in chrome_paths:
        if os.path.exists(path):
            chrome_exe = path
            break
    
    if not chrome_exe:
        print("‚ùå Chrome –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return False
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π –ø—Ä–æ—Ñ—ñ–ª—å
    temp_dir = tempfile.mkdtemp(prefix="andetect_proxy_test_")
    extension_dir = os.path.join(temp_dir, "proxy_auth_extension")
    os.makedirs(extension_dir, exist_ok=True)
    
    print(f"üìÅ –¢–∏–º—á–∞—Å–æ–≤–∏–π –ø—Ä–æ—Ñ—ñ–ª—å: {temp_dir}")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
    manifest = {
        "manifest_version": 2,
        "name": "Proxy Auth Test",
        "version": "1.0",
        "description": "Test proxy authentication",
        "permissions": [
            "webRequest",
            "webRequestBlocking",
            "<all_urls>",
            "proxy"
        ],
        "background": {
            "scripts": ["background.js"],
            "persistent": True
        }
    }
    
    with open(os.path.join(extension_dir, "manifest.json"), 'w') as f:
        json.dump(manifest, f, indent=2)
    
    background_js = f"""
chrome.webRequest.onAuthRequired.addListener(
    function(details) {{
        console.log('üîê Proxy auth required for:', details.url);
        console.log('üîë Using credentials: {username}');
        return {{
            authCredentials: {{
                username: '{username}',
                password: '{password}'
            }}
        }};
    }},
    {{urls: ["<all_urls>"]}},
    ["blocking"]
);

console.log('‚úÖ Proxy Auth Extension loaded');
console.log('üåê Ready for proxy: {host}:{port}');
"""
    
    with open(os.path.join(extension_dir, "background.js"), 'w') as f:
        f.write(background_js)
    
    # –§–ª–∞–≥–∏ Chrome
    flags = [
        f"--user-data-dir={temp_dir}",
        "--no-first-run",
        "--no-default-browser-check",
        f"--proxy-server=http://{host}:{port}",
        f"--load-extension={extension_dir}",
        "--disable-extensions-except=" + extension_dir,
        "https://httpbin.org/ip"  # –°–∞–π—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ IP
    ]
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ Chrome –∑ –ø—Ä–æ–∫—Å—ñ...")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {chrome_exe} {' '.join(flags[:5])}...")
    
    try:
        process = subprocess.Popen([chrome_exe] + flags)
        print(f"‚úÖ Chrome –∑–∞–ø—É—â–µ–Ω–æ! PID: {process.pid}")
        print("üîç –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä—ñ:")
        print("   1. –í—ñ–¥–∫—Ä–∏–ª–∞—Å—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞ httpbin.org/ip")
        print(f"   2. IP-–∞–¥—Ä–µ—Å–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –ø—Ä–æ–∫—Å—ñ: {host}")
        print("   3. –ù–µ–º–∞—î –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é")
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É Chrome: {e}")
        return False

def main():
    print("=" * 60)
    print("        –¢–µ—Å—Ç –ø—Ä–æ–∫—Å—ñ –∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—î—é –¥–ª—è AnDetect")
    print("=" * 60)
    print()
    
    proxy_example = "45.158.61.63:46130:RQQ6C0VF:MZH4VXZU"
    proxy_input = input(f"–í–≤–µ–¥—ñ—Ç—å –ø—Ä–æ–∫—Å—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ IP:PORT:USER:PASS\n(–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è —Ç–µ—Å—Ç—É –∑ –ø—Ä–∏–∫–ª–∞–¥–æ–º):\n> ").strip()
    
    if not proxy_input:
        proxy_input = proxy_example
        print(f"üìù –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –ø—Ä–∏–∫–ª–∞–¥: {proxy_input}")
    
    print()
    if test_proxy_with_auth(proxy_input):
        print()
        print("‚úÖ –¢–µ—Å—Ç –∑–∞–ø—É—â–µ–Ω–æ! –Ø–∫—â–æ –≤—Å–µ –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ:")
        print("   - –ù–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ httpbin.org/ip –±—É–¥–µ –ø–æ–∫–∞–∑–∞–Ω–æ IP –≤–∞—à–æ–≥–æ –ø—Ä–æ–∫—Å—ñ")
        print("   - –ù–µ –±—É–¥—É—Ç—å –∑'—è–≤–ª—è—Ç–∏—Å—è –¥—ñ–∞–ª–æ–≥–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó")
        print("   - –£ –∫–æ–Ω—Å–æ–ª—ñ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞ (F12) –±—É–¥—É—Ç—å –ª–æ–≥–∏ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è")
    else:
        print()
        print("‚ùå –¢–µ—Å—Ç –Ω–µ –≤–¥–∞–≤—Å—è. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ:")
        print("   - –ü—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç—É –ø—Ä–æ–∫—Å—ñ")
        print("   - –î–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å –ø—Ä–æ–∫—Å—ñ")
        print("   - –ü—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –ª–æ–≥—ñ–Ω–∞/–ø–∞—Ä–æ–ª—é")
    
    input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –≤–∏—Ö–æ–¥—É...")

if __name__ == "__main__":
    main()
>>>>>>> 5a38118ad408679126e5a17483fa7875264c621b
