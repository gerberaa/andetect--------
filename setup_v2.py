#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –∑–±—ñ—Ä–∫–∏ AnDetect Profile Manager v2.0
–°—Ç–≤–æ—Ä—é—î –≤–∏–∫–æ–Ω—É–≤–∞–Ω–∏–π —Ñ–∞–π–ª —Ç–∞ —ñ–Ω—Å—Ç–∞–ª—è—Ç–æ—Ä –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–º —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª–æ–º
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
APP_NAME = "AnDetectProfileManager"
APP_VERSION = "2.0.0"
APP_DESCRIPTION = "–†–æ–∑—à–∏—Ä–µ–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ—Ñ—ñ–ª—ñ–≤ –±—Ä–∞—É–∑–µ—Ä–∞ –∑ —ñ–∫–æ–Ω–∫–∞–º–∏ —Ç–∞ –º—ñ—Ç–∫–∞–º–∏"
APP_AUTHOR = "AnDetect Team"
MAIN_SCRIPT = "profile_manager_v2.py"

def check_dependencies():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π"""
    print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...")
    
    required_packages = [
        'PyQt5>=5.15.0',
        'PyQtWebEngine>=5.15.0', 
        'PySocks>=1.7.0',
        'requests>=2.31.0',
        'cryptography>=41.0.0',
        'pyinstaller>=6.0.0'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            if package.startswith('pyinstaller'):
                import PyInstaller
            elif package.startswith('PyQt5'):
                import PyQt5
            elif package.startswith('PyQtWebEngine'):
                import PyQtWebEngine
            elif package.startswith('PySocks'):
                import socks
            elif package.startswith('requests'):
                import requests
            elif package.startswith('cryptography'):
                import cryptography
            print(f"‚úÖ {package.split('>=')[0]} –∑–Ω–∞–π–¥–µ–Ω–æ")
        except ImportError:
            missing_packages.append(package)
            print(f"‚ùå {package.split('>=')[0]} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    
    if missing_packages:
        print(f"\nüì¶ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è {len(missing_packages)} –ø–∞–∫–µ—Ç—ñ–≤...")
        for package in missing_packages:
            print(f"‚è≥ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è {package}...")
            result = subprocess.run([sys.executable, '-m', 'pip', 'install', package], 
                                  capture_output=True, text=True)
            if result.returncode == 0:
                print(f"‚úÖ {package} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            else:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è {package}: {result.stderr}")
                return False
    
    return True

def create_spec_file():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è .spec —Ñ–∞–π–ª—É –¥–ª—è PyInstaller"""
    print("üìù –°—Ç–≤–æ—Ä–µ–Ω–Ω—è .spec —Ñ–∞–π–ª—É...")
    
    spec_content = f'''# -*- mode: python ; coding: utf-8 -*-
import sys
import os
from PyInstaller.utils.hooks import collect_all

# –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –º–æ–¥—É–ª—ñ PyQt5
datas = []
binaries = []
hiddenimports = []

# PyQt5 –º–æ–¥—É–ª—ñ
qt_modules = [
    'PyQt5.QtCore',
    'PyQt5.QtGui', 
    'PyQt5.QtWidgets',
    'PyQt5.QtWebEngine',
    'PyQt5.QtWebEngineWidgets',
    'PyQt5.QtNetwork',
    'PyQt5.QtPrintSupport'
]

for module in qt_modules:
    try:
        tmp_ret = collect_all(module)
        datas += tmp_ret[0]
        binaries += tmp_ret[1] 
        hiddenimports += tmp_ret[2]
    except:
        pass

# –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ñ–∞–π–ª–∏
datas += [
    ('browser', 'browser'),
    ('user_agents.py', '.'),
    ('profile_icons.py', '.'),
    ('profile_dialog_v2.py', '.'),
    ('README.md', '.'),
    ('QUICKSTART.md', '.'),
    ('LICENSE', '.'),
]

# –î–æ–¥–∞—î–º–æ –ª–æ–≥–æ—Ç–∏–ø —è–∫—â–æ —ñ—Å–Ω—É—î
if os.path.exists('logo.png'):
    datas += [('logo.png', '.')]
elif os.path.exists('icon.ico'):
    datas += [('icon.ico', '.')]

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±—ñ—Ä–∫–∏
block_cipher = None

a = Analysis(
    ['{MAIN_SCRIPT}'],
    pathex=[],
    binaries=binaries,
    datas=datas,
    hiddenimports=hiddenimports + [
        'cryptography.fernet',
        'sqlite3',
        'json',
        'uuid',
        'datetime',
        'subprocess',
        'shutil',
        'random'
    ],
    hookspath=[],
    hooksconfig={{}},
    runtime_hooks=[],
    excludes=[
        'tkinter',
        'matplotlib',
        'numpy',
        'pandas',
        'PIL',
        'cv2'
    ],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)

pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.zipfiles,
    a.datas,
    [],
    name='{APP_NAME}',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    upx_exclude=[],
    runtime_tmpdir=None,
    console=False,  # GUI –¥–æ–¥–∞—Ç–æ–∫
    disable_windowed_traceback=False,
    argv_emulation=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
    icon='logo.png' if os.path.exists('logo.png') else ('icon.ico' if os.path.exists('icon.ico') else None),
    version='version_info.txt'
)
'''
    
    with open(f'{APP_NAME}.spec', 'w', encoding='utf-8') as f:
        f.write(spec_content)
    
    print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ {APP_NAME}.spec")
    return True

def create_version_info():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—É –≤–µ—Ä—Å—ñ—ó –¥–ª—è Windows"""
    print("üìã –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –≤–µ—Ä—Å—ñ—é...")
    
    version_info = f'''# UTF-8
VSVersionInfo(
  ffi=FixedFileInfo(
    filevers=({APP_VERSION.replace('.', ', ')}, 0),
    prodvers=({APP_VERSION.replace('.', ', ')}, 0),
    mask=0x3f,
    flags=0x0,
    OS=0x40004,
    fileType=0x1,
    subtype=0x0,
    date=(0, 0)
    ),
  kids=[
    StringFileInfo(
      [
      StringTable(
        u'040904B0',
        [StringStruct(u'CompanyName', u'{APP_AUTHOR}'),
        StringStruct(u'FileDescription', u'{APP_DESCRIPTION}'),
        StringStruct(u'FileVersion', u'{APP_VERSION}'),
        StringStruct(u'InternalName', u'{APP_NAME}'),
        StringStruct(u'LegalCopyright', u'¬© 2024 {APP_AUTHOR}'),
        StringStruct(u'OriginalFilename', u'{APP_NAME}.exe'),
        StringStruct(u'ProductName', u'AnDetect Profile Manager v2.0'),
        StringStruct(u'ProductVersion', u'{APP_VERSION}')])
      ]), 
    VarFileInfo([VarStruct(u'Translation', [1033, 1200])])
  ]
)'''
    
    with open('version_info.txt', 'w', encoding='utf-8') as f:
        f.write(version_info)
    
    print("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ version_info.txt")
    return True

def build_executable():
    """–ó–±—ñ—Ä–∫–∞ –≤–∏–∫–æ–Ω—É–≤–∞–Ω–æ–≥–æ —Ñ–∞–π–ª—É"""
    print("üî® –ó–±—ñ—Ä–∫–∞ –≤–∏–∫–æ–Ω—É–≤–∞–Ω–æ–≥–æ —Ñ–∞–π–ª—É...")
    
    # –û—á–∏—â–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –∑–±—ñ—Ä–æ–∫
    for folder in ['build', 'dist']:
        if os.path.exists(folder):
            print(f"üßπ –û—á–∏—â–µ–Ω–Ω—è {folder}/")
            shutil.rmtree(folder)
    
    # –ó–∞–ø—É—Å–∫ PyInstaller
    cmd = [
        'pyinstaller',
        f'{APP_NAME}.spec',
        '--clean',
        '--noconfirm'
    ]
    
    print(f"‚öôÔ∏è  –í–∏–∫–æ–Ω–∞–Ω–Ω—è: {' '.join(cmd)}")
    result = subprocess.run(cmd, capture_output=True, text=True)
    
    if result.returncode == 0:
        print("‚úÖ –ó–±—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π —Ñ–∞–π–ª
        exe_path = f'dist/{APP_NAME}.exe'
        if os.path.exists(exe_path):
            size = os.path.getsize(exe_path) / (1024 * 1024)  # MB
            print(f"üì¶ –°—Ç–≤–æ—Ä–µ–Ω–æ: {exe_path} ({size:.1f} MB)")
            return True
        else:
            print("‚ùå EXE —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return False
    else:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±—ñ—Ä–∫–∏: {result.stderr}")
        return False

def create_installer():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è NSIS —ñ–Ω—Å—Ç–∞–ª—è—Ç–æ—Ä–∞"""
    print("üì¶ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—Å—Ç–∞–ª—è—Ç–æ—Ä–∞...")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ NSIS
    nsis_path = None
    possible_nsis_paths = [
        r"C:\Program Files (x86)\NSIS\makensis.exe",
        r"C:\Program Files\NSIS\makensis.exe",
        "makensis.exe"
    ]
    
    for path in possible_nsis_paths:
        if shutil.which(path) or os.path.exists(path):
            nsis_path = path
            break
    
    if not nsis_path:
        print("‚ö†Ô∏è  NSIS –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—Å—Ç–∞–ª—è—Ç–æ—Ä–∞")
        print("üí° –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ NSIS –∑ https://nsis.sourceforge.io/")
        return False
    
    print(f"‚úÖ NSIS –∑–Ω–∞–π–¥–µ–Ω–æ: {nsis_path}")
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è NSIS —Å–∫—Ä–∏–ø—Ç—É
    nsis_script = f'''!define APP_NAME "{APP_NAME}"
!define APP_VERSION "{APP_VERSION}"
!define APP_DESCRIPTION "{APP_DESCRIPTION}"
!define APP_AUTHOR "{APP_AUTHOR}"

Name "${{APP_NAME}} v${{APP_VERSION}}"
OutFile "{APP_NAME}_v{APP_VERSION}_Setup.exe"
InstallDir "$PROGRAMFILES\\${{APP_NAME}}"

RequestExecutionLevel admin

; –°—Ç–æ—Ä—ñ–Ω–∫–∏ —ñ–Ω—Å—Ç–∞–ª—è—Ç–æ—Ä–∞
Page directory
Page instfiles

; –°—Ç–æ—Ä—ñ–Ω–∫–∏ –¥–µ—ñ–Ω—Å—Ç–∞–ª—è—Ç–æ—Ä–∞  
UninstPage uninstConfirm
UninstPage instfiles

Section "–û—Å–Ω–æ–≤–Ω—ñ —Ñ–∞–π–ª–∏"
    SetOutPath "$INSTDIR"
    
    ; –û—Å–Ω–æ–≤–Ω–∏–π –≤–∏–∫–æ–Ω—É–≤–∞–Ω–∏–π —Ñ–∞–π–ª
    File "dist\\{APP_NAME}.exe"
    
    ; –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è
    File /nonfatal "README.md"
    File /nonfatal "QUICKSTART.md" 
    File /nonfatal "LICENSE"
    
    ; –Ü–∫–æ–Ω–∫–∞
    File /nonfatal "logo.png"
    File /nonfatal "icon.ico"
    
    ; –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —è—Ä–ª–∏–∫—ñ–≤
    CreateDirectory "$SMPROGRAMS\\${{APP_NAME}}"
    CreateShortCut "$SMPROGRAMS\\${{APP_NAME}}\\${{APP_NAME}}.lnk" "$INSTDIR\\{APP_NAME}.exe"
    CreateShortCut "$SMPROGRAMS\\${{APP_NAME}}\\–í–∏–¥–∞–ª–∏—Ç–∏ ${{APP_NAME}}.lnk" "$INSTDIR\\Uninstall.exe"
    
    ; –Ø—Ä–ª–∏–∫ –Ω–∞ —Ä–æ–±–æ—á–æ–º—É —Å—Ç–æ–ª—ñ
    CreateShortCut "$DESKTOP\\${{APP_NAME}}.lnk" "$INSTDIR\\{APP_NAME}.exe"
    
    ; –ó–∞–ø–∏—Å–∏ –≤ —Ä–µ—î—Å—Ç—Ä
    WriteRegStr HKLM "Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\${{APP_NAME}}" "DisplayName" "${{APP_NAME}} v${{APP_VERSION}}"
    WriteRegStr HKLM "Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\${{APP_NAME}}" "UninstallString" "$INSTDIR\\Uninstall.exe"
    WriteRegStr HKLM "Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\${{APP_NAME}}" "DisplayIcon" "$INSTDIR\\{APP_NAME}.exe"
    WriteRegStr HKLM "Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\${{APP_NAME}}" "DisplayVersion" "${{APP_VERSION}}"
    WriteRegStr HKLM "Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\${{APP_NAME}}" "Publisher" "${{APP_AUTHOR}}"
    WriteRegDWORD HKLM "Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\${{APP_NAME}}" "NoModify" 1
    WriteRegDWORD HKLM "Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\${{APP_NAME}}" "NoRepair" 1
    
    ; –î–µ—ñ–Ω—Å—Ç–∞–ª—è—Ç–æ—Ä
    WriteUninstaller "$INSTDIR\\Uninstall.exe"
SectionEnd

; –î–µ—ñ–Ω—Å—Ç–∞–ª—è—Ç–æ—Ä
Section "Uninstall"
    ; –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤
    Delete "$INSTDIR\\{APP_NAME}.exe"
    Delete "$INSTDIR\\README.md"
    Delete "$INSTDIR\\QUICKSTART.md"
    Delete "$INSTDIR\\LICENSE"
    Delete "$INSTDIR\\logo.png"
    Delete "$INSTDIR\\icon.ico"
    Delete "$INSTDIR\\Uninstall.exe"
    
    ; –í–∏–¥–∞–ª–µ–Ω–Ω—è —è—Ä–ª–∏–∫—ñ–≤
    Delete "$SMPROGRAMS\\${{APP_NAME}}\\${{APP_NAME}}.lnk"
    Delete "$SMPROGRAMS\\${{APP_NAME}}\\–í–∏–¥–∞–ª–∏—Ç–∏ ${{APP_NAME}}.lnk"
    RMDir "$SMPROGRAMS\\${{APP_NAME}}"
    Delete "$DESKTOP\\${{APP_NAME}}.lnk"
    
    ; –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑ —Ä–µ—î—Å—Ç—Ä—É
    DeleteRegKey HKLM "Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\${{APP_NAME}}"
    
    ; –í–∏–¥–∞–ª–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
    RMDir "$INSTDIR"
SectionEnd'''
    
    script_path = f'{APP_NAME}_installer.nsi'
    with open(script_path, 'w', encoding='utf-8') as f:
        f.write(nsis_script)
    
    print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ {script_path}")
    
    # –ö–æ–º–ø—ñ–ª—è—Ü—ñ—è —ñ–Ω—Å—Ç–∞–ª—è—Ç–æ—Ä–∞
    print("üîß –ö–æ–º–ø—ñ–ª—è—Ü—ñ—è —ñ–Ω—Å—Ç–∞–ª—è—Ç–æ—Ä–∞...")
    result = subprocess.run([nsis_path, script_path], capture_output=True, text=True)
    
    if result.returncode == 0:
        installer_path = f'{APP_NAME}_v{APP_VERSION}_Setup.exe'
        if os.path.exists(installer_path):
            size = os.path.getsize(installer_path) / (1024 * 1024)  # MB
            print(f"‚úÖ –Ü–Ω—Å—Ç–∞–ª—è—Ç–æ—Ä —Å—Ç–≤–æ—Ä–µ–Ω–æ: {installer_path} ({size:.1f} MB)")
            return True
        else:
            print("‚ùå –Ü–Ω—Å—Ç–∞–ª—è—Ç–æ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return False
    else:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—Å—Ç–∞–ª—è—Ç–æ—Ä–∞: {result.stderr}")
        return False

def cleanup():
    """–û—á–∏—â–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤"""
    print("üßπ –û—á–∏—â–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤...")
    
    temp_files = [
        f'{APP_NAME}.spec',
        'version_info.txt',
        f'{APP_NAME}_installer.nsi',
        'build'
    ]
    
    for item in temp_files:
        try:
            if os.path.isfile(item):
                os.remove(item)
                print(f"üóëÔ∏è  –í–∏–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª: {item}")
            elif os.path.isdir(item):
                shutil.rmtree(item)
                print(f"üóëÔ∏è  –í–∏–¥–∞–ª–µ–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é: {item}")
        except Exception as e:
            print(f"‚ö†Ô∏è  –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ {item}: {e}")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–±—ñ—Ä–∫–∏"""
    print("=" * 60)
    print(f"  üõ°Ô∏è {APP_NAME} v{APP_VERSION} - –ó–±—ñ—Ä–∫–∞ —ñ–Ω—Å—Ç–∞–ª—è—Ç–æ—Ä–∞")
    print("=" * 60)
    print()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª—É
    if not os.path.exists(MAIN_SCRIPT):
        print(f"‚ùå –û—Å–Ω–æ–≤–Ω–∏–π —Ñ–∞–π–ª {MAIN_SCRIPT} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return False
    
    steps = [
        ("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π", check_dependencies),
        ("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è .spec —Ñ–∞–π–ª—É", create_spec_file),
        ("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –≤–µ—Ä—Å—ñ—é", create_version_info),
        ("–ó–±—ñ—Ä–∫–∞ –≤–∏–∫–æ–Ω—É–≤–∞–Ω–æ–≥–æ —Ñ–∞–π–ª—É", build_executable),
        ("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—Å—Ç–∞–ª—è—Ç–æ—Ä–∞", create_installer)
    ]
    
    success_count = 0
    
    for step_name, step_func in steps:
        print(f"\\n‚è≥ {step_name}...")
        try:
            if step_func():
                success_count += 1
                print(f"‚úÖ {step_name} - —É—Å–ø—ñ—à–Ω–æ")
            else:
                print(f"‚ùå {step_name} - –ø–æ–º–∏–ª–∫–∞")
                if step_name in ["–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π", "–ó–±—ñ—Ä–∫–∞ –≤–∏–∫–æ–Ω—É–≤–∞–Ω–æ–≥–æ —Ñ–∞–π–ª—É"]:
                    print("üõë –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞, –∑—É–ø–∏–Ω—è—î–º–æ –∑–±—ñ—Ä–∫—É")
                    break
        except Exception as e:
            print(f"‚ùå {step_name} - –≤–∏–Ω—è—Ç–∫–∞: {e}")
            if step_name in ["–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π", "–ó–±—ñ—Ä–∫–∞ –≤–∏–∫–æ–Ω—É–≤–∞–Ω–æ–≥–æ —Ñ–∞–π–ª—É"]:
                print("üõë –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞, –∑—É–ø–∏–Ω—è—î–º–æ –∑–±—ñ—Ä–∫—É")
                break
    
    print("\\n" + "=" * 60)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–±—ñ—Ä–∫–∏: {success_count}/{len(steps)} –µ—Ç–∞–ø—ñ–≤ —É—Å–ø—ñ—à–Ω–æ")
    
    if success_count >= 4:  # –û—Å–Ω–æ–≤–Ω—ñ –µ—Ç–∞–ø–∏ –ø—Ä–æ–π—à–ª–∏
        print("üéâ –ó–±—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")
        print(f"üì¶ –í–∏–∫–æ–Ω—É–≤–∞–Ω–∏–π —Ñ–∞–π–ª: dist/{APP_NAME}.exe")
        
        installer_path = f'{APP_NAME}_v{APP_VERSION}_Setup.exe'
        if os.path.exists(installer_path):
            print(f"üíø –Ü–Ω—Å—Ç–∞–ª—è—Ç–æ—Ä: {installer_path}")
        
        print("\\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:")
        print("  ‚Ä¢ –ü—Ä–æ—Ç–µ—Å—Ç—É–π—Ç–µ –≤–∏–∫–æ–Ω—É–≤–∞–Ω–∏–π —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ —Ä–æ–∑–ø–æ–≤—Å—é–¥–∂–µ–Ω–Ω—è–º")
        print("  ‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —ñ–Ω—Å—Ç–∞–ª—è—Ç–æ—Ä –Ω–∞ —á–∏—Å—Ç—ñ–π —Å–∏—Å—Ç–µ–º—ñ")
        print("  ‚Ä¢ –°—Ç–≤–æ—Ä—ñ—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é –∑–±—ñ—Ä–∫–∏")
        
        # –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è
        cleanup_choice = input("\\nüßπ –û—á–∏—Å—Ç–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏? (y/n): ").lower()
        if cleanup_choice in ['y', 'yes', '—Ç–∞–∫', '—Ç']:
            cleanup()
        
        return True
    else:
        print("‚ùå –ó–±—ñ—Ä–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫–∏")
        return False

if __name__ == "__main__":
    try:
        success = main()
        input("\\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –≤–∏—Ö–æ–¥—É...")
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\\n\\n‚èπÔ∏è  –ó–±—ñ—Ä–∫–∞ –ø–µ—Ä–µ—Ä–≤–∞–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\\n\\nüí• –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –≤–∏—Ö–æ–¥—É...")
        sys.exit(1)
